// Generated by @wagmi/cli@1.2.0 on 6/16/2023 at 2:42:27â€¯PM
import {
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useNetwork,
  Address,
  useContractEvent,
  UseContractEventConfig,
} from 'wagmi'
import {
  ReadContractResult,
  WriteContractMode,
  PrepareWriteContractResult,
} from 'wagmi/actions'

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ITankGame
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iTankGameABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tankId', internalType: 'uint256', type: 'uint256' },
      { name: 'claimer', internalType: 'address', type: 'address' },
    ],
    name: 'claim',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'tankId', internalType: 'uint256', type: 'uint256' }],
    name: 'drip',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'fromId', internalType: 'uint256', type: 'uint256' },
      { name: 'toId', internalType: 'uint256', type: 'uint256' },
      { name: 'hearts', internalType: 'uint256', type: 'uint256' },
      { name: 'aps', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'give',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [],
    name: 'init',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [],
    name: 'join',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'fromId', internalType: 'uint256', type: 'uint256' },
      {
        name: 'to',
        internalType: 'struct ITankGame.Point',
        type: 'tuple',
        components: [
          { name: 'x', internalType: 'uint256', type: 'uint256' },
          { name: 'y', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
    name: 'move',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'settings',
    outputs: [
      {
        name: '',
        internalType: 'struct ITankGame.GameSettings',
        type: 'tuple',
        components: [
          { name: 'playerCount', internalType: 'uint256', type: 'uint256' },
          { name: 'boardSize', internalType: 'uint256', type: 'uint256' },
          { name: 'initAPs', internalType: 'uint256', type: 'uint256' },
          { name: 'initHearts', internalType: 'uint256', type: 'uint256' },
          { name: 'voteThreshold', internalType: 'uint256', type: 'uint256' },
          { name: 'initShootRange', internalType: 'uint256', type: 'uint256' },
          { name: 'upgradeCost', internalType: 'uint256', type: 'uint256' },
          { name: 'epochSeconds', internalType: 'uint256', type: 'uint256' },
          {
            name: 'actionDelaySeconds',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'fromId', internalType: 'uint256', type: 'uint256' },
      { name: 'toId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'shoot',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'tankId', internalType: 'uint256', type: 'uint256' }],
    name: 'upgrade',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'voter', internalType: 'uint256', type: 'uint256' },
      { name: 'cursed', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'vote',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IMulticall3
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iMulticall3ABI = [
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'calls',
        internalType: 'struct IMulticall3.Call[]',
        type: 'tuple[]',
        components: [
          { name: 'target', internalType: 'address', type: 'address' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'aggregate',
    outputs: [
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
      { name: 'returnData', internalType: 'bytes[]', type: 'bytes[]' },
    ],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'calls',
        internalType: 'struct IMulticall3.Call3[]',
        type: 'tuple[]',
        components: [
          { name: 'target', internalType: 'address', type: 'address' },
          { name: 'allowFailure', internalType: 'bool', type: 'bool' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'aggregate3',
    outputs: [
      {
        name: 'returnData',
        internalType: 'struct IMulticall3.Result[]',
        type: 'tuple[]',
        components: [
          { name: 'success', internalType: 'bool', type: 'bool' },
          { name: 'returnData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'calls',
        internalType: 'struct IMulticall3.Call3Value[]',
        type: 'tuple[]',
        components: [
          { name: 'target', internalType: 'address', type: 'address' },
          { name: 'allowFailure', internalType: 'bool', type: 'bool' },
          { name: 'value', internalType: 'uint256', type: 'uint256' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'aggregate3Value',
    outputs: [
      {
        name: 'returnData',
        internalType: 'struct IMulticall3.Result[]',
        type: 'tuple[]',
        components: [
          { name: 'success', internalType: 'bool', type: 'bool' },
          { name: 'returnData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'calls',
        internalType: 'struct IMulticall3.Call[]',
        type: 'tuple[]',
        components: [
          { name: 'target', internalType: 'address', type: 'address' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'blockAndAggregate',
    outputs: [
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
      { name: 'blockHash', internalType: 'bytes32', type: 'bytes32' },
      {
        name: 'returnData',
        internalType: 'struct IMulticall3.Result[]',
        type: 'tuple[]',
        components: [
          { name: 'success', internalType: 'bool', type: 'bool' },
          { name: 'returnData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getBasefee',
    outputs: [{ name: 'basefee', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'getBlockHash',
    outputs: [{ name: 'blockHash', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getBlockNumber',
    outputs: [
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getChainId',
    outputs: [{ name: 'chainid', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getCurrentBlockCoinbase',
    outputs: [{ name: 'coinbase', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getCurrentBlockDifficulty',
    outputs: [{ name: 'difficulty', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getCurrentBlockGasLimit',
    outputs: [{ name: 'gaslimit', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getCurrentBlockTimestamp',
    outputs: [{ name: 'timestamp', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'getEthBalance',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getLastBlockHash',
    outputs: [{ name: 'blockHash', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'requireSuccess', internalType: 'bool', type: 'bool' },
      {
        name: 'calls',
        internalType: 'struct IMulticall3.Call[]',
        type: 'tuple[]',
        components: [
          { name: 'target', internalType: 'address', type: 'address' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'tryAggregate',
    outputs: [
      {
        name: 'returnData',
        internalType: 'struct IMulticall3.Result[]',
        type: 'tuple[]',
        components: [
          { name: 'success', internalType: 'bool', type: 'bool' },
          { name: 'returnData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'requireSuccess', internalType: 'bool', type: 'bool' },
      {
        name: 'calls',
        internalType: 'struct IMulticall3.Call[]',
        type: 'tuple[]',
        components: [
          { name: 'target', internalType: 'address', type: 'address' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'tryBlockAndAggregate',
    outputs: [
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
      { name: 'blockHash', internalType: 'bytes32', type: 'bytes32' },
      {
        name: 'returnData',
        internalType: 'struct IMulticall3.Result[]',
        type: 'tuple[]',
        components: [
          { name: 'success', internalType: 'bool', type: 'bool' },
          { name: 'returnData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// StdInvariant
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const stdInvariantABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'excludeArtifacts',
    outputs: [
      {
        name: 'excludedArtifacts_',
        internalType: 'string[]',
        type: 'string[]',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'excludeContracts',
    outputs: [
      {
        name: 'excludedContracts_',
        internalType: 'address[]',
        type: 'address[]',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'excludeSenders',
    outputs: [
      {
        name: 'excludedSenders_',
        internalType: 'address[]',
        type: 'address[]',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'targetArtifactSelectors',
    outputs: [
      {
        name: 'targetedArtifactSelectors_',
        internalType: 'struct StdInvariant.FuzzSelector[]',
        type: 'tuple[]',
        components: [
          { name: 'addr', internalType: 'address', type: 'address' },
          { name: 'selectors', internalType: 'bytes4[]', type: 'bytes4[]' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'targetArtifacts',
    outputs: [
      {
        name: 'targetedArtifacts_',
        internalType: 'string[]',
        type: 'string[]',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'targetContracts',
    outputs: [
      {
        name: 'targetedContracts_',
        internalType: 'address[]',
        type: 'address[]',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'targetSelectors',
    outputs: [
      {
        name: 'targetedSelectors_',
        internalType: 'struct StdInvariant.FuzzSelector[]',
        type: 'tuple[]',
        components: [
          { name: 'addr', internalType: 'address', type: 'address' },
          { name: 'selectors', internalType: 'bytes4[]', type: 'bytes4[]' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'targetSenders',
    outputs: [
      {
        name: 'targetedSenders_',
        internalType: 'address[]',
        type: 'address[]',
      },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// TankGame
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x4CF4dd3f71B67a7622ac250f8b10d266Dc5aEbcE)
 * -
 */
export const tankGameABI = [
  {
    stateMutability: 'payable',
    type: 'constructor',
    inputs: [
      {
        name: 'gs',
        internalType: 'struct ITankGame.GameSettings',
        type: 'tuple',
        components: [
          { name: 'playerCount', internalType: 'uint256', type: 'uint256' },
          { name: 'boardSize', internalType: 'uint256', type: 'uint256' },
          { name: 'initAPs', internalType: 'uint256', type: 'uint256' },
          { name: 'initHearts', internalType: 'uint256', type: 'uint256' },
          { name: 'voteThreshold', internalType: 'uint256', type: 'uint256' },
          { name: 'initShootRange', internalType: 'uint256', type: 'uint256' },
          { name: 'upgradeCost', internalType: 'uint256', type: 'uint256' },
          { name: 'epochSeconds', internalType: 'uint256', type: 'uint256' },
          {
            name: 'actionDelaySeconds',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'reciever',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'tankId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Claim',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'tankId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Drip',
  },
  { type: 'event', anonymous: false, inputs: [], name: 'GameStarted' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'fromId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'toId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'hearts',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'aps', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'Give',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'tankId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'x', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'y', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'Move',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'player',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'PlayerJoined',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'tankId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'targetId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Shoot',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'tankId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'range',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Upgrade',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'voter',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'cursed',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'epoch',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Vote',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tankId', internalType: 'uint256', type: 'uint256' },
      { name: 'claimer', internalType: 'address', type: 'address' },
    ],
    name: 'claim',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'tankId', internalType: 'uint256', type: 'uint256' }],
    name: 'drip',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'epochStart',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'tankA', internalType: 'uint256', type: 'uint256' },
      { name: 'tankB', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getDistance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'tankA', internalType: 'uint256', type: 'uint256' },
      {
        name: 'p',
        internalType: 'struct ITankGame.Point',
        type: 'tuple',
        components: [
          { name: 'x', internalType: 'uint256', type: 'uint256' },
          { name: 'y', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
    name: 'getDistance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'fromId', internalType: 'uint256', type: 'uint256' },
      { name: 'toId', internalType: 'uint256', type: 'uint256' },
      { name: 'hearts', internalType: 'uint256', type: 'uint256' },
      { name: 'aps', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'give',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'heartsOnBoard',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [],
    name: 'init',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [],
    name: 'join',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'lastActionTimestamp',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'lastDripEpoch',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tankId', internalType: 'uint256', type: 'uint256' },
      {
        name: 'to',
        internalType: 'struct ITankGame.Point',
        type: 'tuple',
        components: [
          { name: 'x', internalType: 'uint256', type: 'uint256' },
          { name: 'y', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
    name: 'move',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'numTanksAlive',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'players',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'playersCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'podium',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      {
        name: 'p',
        internalType: 'struct ITankGame.Point',
        type: 'tuple',
        components: [
          { name: 'x', internalType: 'uint256', type: 'uint256' },
          { name: 'y', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
    name: 'pointToIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'prizePool',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'settings',
    outputs: [
      {
        name: '',
        internalType: 'struct ITankGame.GameSettings',
        type: 'tuple',
        components: [
          { name: 'playerCount', internalType: 'uint256', type: 'uint256' },
          { name: 'boardSize', internalType: 'uint256', type: 'uint256' },
          { name: 'initAPs', internalType: 'uint256', type: 'uint256' },
          { name: 'initHearts', internalType: 'uint256', type: 'uint256' },
          { name: 'voteThreshold', internalType: 'uint256', type: 'uint256' },
          { name: 'initShootRange', internalType: 'uint256', type: 'uint256' },
          { name: 'upgradeCost', internalType: 'uint256', type: 'uint256' },
          { name: 'epochSeconds', internalType: 'uint256', type: 'uint256' },
          {
            name: 'actionDelaySeconds',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'fromId', internalType: 'uint256', type: 'uint256' },
      { name: 'toId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'shoot',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'state',
    outputs: [
      { name: '', internalType: 'enum TankGame.GameState', type: 'uint8' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'tankToPosition',
    outputs: [
      { name: 'x', internalType: 'uint256', type: 'uint256' },
      { name: 'y', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'tanks',
    outputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'hearts', internalType: 'uint256', type: 'uint256' },
      { name: 'aps', internalType: 'uint256', type: 'uint256' },
      { name: 'range', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'tanksOnBoard',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'tankId', internalType: 'uint256', type: 'uint256' }],
    name: 'upgrade',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'voter', internalType: 'uint256', type: 'uint256' },
      { name: 'cursed', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'vote',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'votedThisEpoch',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'votesPerEpoch',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
] as const

/**
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x4CF4dd3f71B67a7622ac250f8b10d266Dc5aEbcE)
 * -
 */
export const tankGameAddress = {
  1: '0x4CF4dd3f71B67a7622ac250f8b10d266Dc5aEbcE',
  31337: '0x5FbDB2315678afecb367f032d93F642f64180aa3',
} as const

/**
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x4CF4dd3f71B67a7622ac250f8b10d266Dc5aEbcE)
 * -
 */
export const tankGameConfig = {
  address: tankGameAddress,
  abi: tankGameABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iTankGameABI}__.
 */
export function useITankGameRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iTankGameABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iTankGameABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iTankGameABI,
    ...config,
  } as UseContractReadConfig<typeof iTankGameABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iTankGameABI}__ and `functionName` set to `"settings"`.
 */
export function useITankGameSettings<
  TFunctionName extends 'settings',
  TSelectData = ReadContractResult<typeof iTankGameABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iTankGameABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iTankGameABI,
    functionName: 'settings',
    ...config,
  } as UseContractReadConfig<typeof iTankGameABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iTankGameABI}__.
 */
export function useITankGameWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iTankGameABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof iTankGameABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof iTankGameABI, TFunctionName, TMode>({
    abi: iTankGameABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iTankGameABI}__ and `functionName` set to `"claim"`.
 */
export function useITankGameClaim<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iTankGameABI,
          'claim'
        >['request']['abi'],
        'claim',
        TMode
      > & { functionName?: 'claim' }
    : UseContractWriteConfig<typeof iTankGameABI, 'claim', TMode> & {
        abi?: never
        functionName?: 'claim'
      } = {} as any,
) {
  return useContractWrite<typeof iTankGameABI, 'claim', TMode>({
    abi: iTankGameABI,
    functionName: 'claim',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iTankGameABI}__ and `functionName` set to `"drip"`.
 */
export function useITankGameDrip<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iTankGameABI,
          'drip'
        >['request']['abi'],
        'drip',
        TMode
      > & { functionName?: 'drip' }
    : UseContractWriteConfig<typeof iTankGameABI, 'drip', TMode> & {
        abi?: never
        functionName?: 'drip'
      } = {} as any,
) {
  return useContractWrite<typeof iTankGameABI, 'drip', TMode>({
    abi: iTankGameABI,
    functionName: 'drip',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iTankGameABI}__ and `functionName` set to `"give"`.
 */
export function useITankGameGive<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iTankGameABI,
          'give'
        >['request']['abi'],
        'give',
        TMode
      > & { functionName?: 'give' }
    : UseContractWriteConfig<typeof iTankGameABI, 'give', TMode> & {
        abi?: never
        functionName?: 'give'
      } = {} as any,
) {
  return useContractWrite<typeof iTankGameABI, 'give', TMode>({
    abi: iTankGameABI,
    functionName: 'give',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iTankGameABI}__ and `functionName` set to `"init"`.
 */
export function useITankGameInit<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iTankGameABI,
          'init'
        >['request']['abi'],
        'init',
        TMode
      > & { functionName?: 'init' }
    : UseContractWriteConfig<typeof iTankGameABI, 'init', TMode> & {
        abi?: never
        functionName?: 'init'
      } = {} as any,
) {
  return useContractWrite<typeof iTankGameABI, 'init', TMode>({
    abi: iTankGameABI,
    functionName: 'init',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iTankGameABI}__ and `functionName` set to `"join"`.
 */
export function useITankGameJoin<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iTankGameABI,
          'join'
        >['request']['abi'],
        'join',
        TMode
      > & { functionName?: 'join' }
    : UseContractWriteConfig<typeof iTankGameABI, 'join', TMode> & {
        abi?: never
        functionName?: 'join'
      } = {} as any,
) {
  return useContractWrite<typeof iTankGameABI, 'join', TMode>({
    abi: iTankGameABI,
    functionName: 'join',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iTankGameABI}__ and `functionName` set to `"move"`.
 */
export function useITankGameMove<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iTankGameABI,
          'move'
        >['request']['abi'],
        'move',
        TMode
      > & { functionName?: 'move' }
    : UseContractWriteConfig<typeof iTankGameABI, 'move', TMode> & {
        abi?: never
        functionName?: 'move'
      } = {} as any,
) {
  return useContractWrite<typeof iTankGameABI, 'move', TMode>({
    abi: iTankGameABI,
    functionName: 'move',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iTankGameABI}__ and `functionName` set to `"shoot"`.
 */
export function useITankGameShoot<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iTankGameABI,
          'shoot'
        >['request']['abi'],
        'shoot',
        TMode
      > & { functionName?: 'shoot' }
    : UseContractWriteConfig<typeof iTankGameABI, 'shoot', TMode> & {
        abi?: never
        functionName?: 'shoot'
      } = {} as any,
) {
  return useContractWrite<typeof iTankGameABI, 'shoot', TMode>({
    abi: iTankGameABI,
    functionName: 'shoot',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iTankGameABI}__ and `functionName` set to `"upgrade"`.
 */
export function useITankGameUpgrade<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iTankGameABI,
          'upgrade'
        >['request']['abi'],
        'upgrade',
        TMode
      > & { functionName?: 'upgrade' }
    : UseContractWriteConfig<typeof iTankGameABI, 'upgrade', TMode> & {
        abi?: never
        functionName?: 'upgrade'
      } = {} as any,
) {
  return useContractWrite<typeof iTankGameABI, 'upgrade', TMode>({
    abi: iTankGameABI,
    functionName: 'upgrade',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iTankGameABI}__ and `functionName` set to `"vote"`.
 */
export function useITankGameVote<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iTankGameABI,
          'vote'
        >['request']['abi'],
        'vote',
        TMode
      > & { functionName?: 'vote' }
    : UseContractWriteConfig<typeof iTankGameABI, 'vote', TMode> & {
        abi?: never
        functionName?: 'vote'
      } = {} as any,
) {
  return useContractWrite<typeof iTankGameABI, 'vote', TMode>({
    abi: iTankGameABI,
    functionName: 'vote',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iTankGameABI}__.
 */
export function usePrepareITankGameWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iTankGameABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iTankGameABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iTankGameABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iTankGameABI}__ and `functionName` set to `"claim"`.
 */
export function usePrepareITankGameClaim(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iTankGameABI, 'claim'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iTankGameABI,
    functionName: 'claim',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iTankGameABI, 'claim'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iTankGameABI}__ and `functionName` set to `"drip"`.
 */
export function usePrepareITankGameDrip(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iTankGameABI, 'drip'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iTankGameABI,
    functionName: 'drip',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iTankGameABI, 'drip'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iTankGameABI}__ and `functionName` set to `"give"`.
 */
export function usePrepareITankGameGive(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iTankGameABI, 'give'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iTankGameABI,
    functionName: 'give',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iTankGameABI, 'give'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iTankGameABI}__ and `functionName` set to `"init"`.
 */
export function usePrepareITankGameInit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iTankGameABI, 'init'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iTankGameABI,
    functionName: 'init',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iTankGameABI, 'init'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iTankGameABI}__ and `functionName` set to `"join"`.
 */
export function usePrepareITankGameJoin(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iTankGameABI, 'join'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iTankGameABI,
    functionName: 'join',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iTankGameABI, 'join'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iTankGameABI}__ and `functionName` set to `"move"`.
 */
export function usePrepareITankGameMove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iTankGameABI, 'move'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iTankGameABI,
    functionName: 'move',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iTankGameABI, 'move'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iTankGameABI}__ and `functionName` set to `"shoot"`.
 */
export function usePrepareITankGameShoot(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iTankGameABI, 'shoot'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iTankGameABI,
    functionName: 'shoot',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iTankGameABI, 'shoot'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iTankGameABI}__ and `functionName` set to `"upgrade"`.
 */
export function usePrepareITankGameUpgrade(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iTankGameABI, 'upgrade'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iTankGameABI,
    functionName: 'upgrade',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iTankGameABI, 'upgrade'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iTankGameABI}__ and `functionName` set to `"vote"`.
 */
export function usePrepareITankGameVote(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iTankGameABI, 'vote'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iTankGameABI,
    functionName: 'vote',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iTankGameABI, 'vote'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__.
 */
export function useIMulticall3Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iMulticall3ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iMulticall3ABI,
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getBasefee"`.
 */
export function useIMulticall3GetBasefee<
  TFunctionName extends 'getBasefee',
  TSelectData = ReadContractResult<typeof iMulticall3ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: 'getBasefee',
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getBlockHash"`.
 */
export function useIMulticall3GetBlockHash<
  TFunctionName extends 'getBlockHash',
  TSelectData = ReadContractResult<typeof iMulticall3ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: 'getBlockHash',
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getBlockNumber"`.
 */
export function useIMulticall3GetBlockNumber<
  TFunctionName extends 'getBlockNumber',
  TSelectData = ReadContractResult<typeof iMulticall3ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: 'getBlockNumber',
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getChainId"`.
 */
export function useIMulticall3GetChainId<
  TFunctionName extends 'getChainId',
  TSelectData = ReadContractResult<typeof iMulticall3ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: 'getChainId',
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getCurrentBlockCoinbase"`.
 */
export function useIMulticall3GetCurrentBlockCoinbase<
  TFunctionName extends 'getCurrentBlockCoinbase',
  TSelectData = ReadContractResult<typeof iMulticall3ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: 'getCurrentBlockCoinbase',
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getCurrentBlockDifficulty"`.
 */
export function useIMulticall3GetCurrentBlockDifficulty<
  TFunctionName extends 'getCurrentBlockDifficulty',
  TSelectData = ReadContractResult<typeof iMulticall3ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: 'getCurrentBlockDifficulty',
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getCurrentBlockGasLimit"`.
 */
export function useIMulticall3GetCurrentBlockGasLimit<
  TFunctionName extends 'getCurrentBlockGasLimit',
  TSelectData = ReadContractResult<typeof iMulticall3ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: 'getCurrentBlockGasLimit',
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getCurrentBlockTimestamp"`.
 */
export function useIMulticall3GetCurrentBlockTimestamp<
  TFunctionName extends 'getCurrentBlockTimestamp',
  TSelectData = ReadContractResult<typeof iMulticall3ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: 'getCurrentBlockTimestamp',
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getEthBalance"`.
 */
export function useIMulticall3GetEthBalance<
  TFunctionName extends 'getEthBalance',
  TSelectData = ReadContractResult<typeof iMulticall3ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: 'getEthBalance',
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getLastBlockHash"`.
 */
export function useIMulticall3GetLastBlockHash<
  TFunctionName extends 'getLastBlockHash',
  TSelectData = ReadContractResult<typeof iMulticall3ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: 'getLastBlockHash',
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__.
 */
export function useIMulticall3Write<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iMulticall3ABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof iMulticall3ABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof iMulticall3ABI, TFunctionName, TMode>({
    abi: iMulticall3ABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"aggregate"`.
 */
export function useIMulticall3Aggregate<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iMulticall3ABI,
          'aggregate'
        >['request']['abi'],
        'aggregate',
        TMode
      > & { functionName?: 'aggregate' }
    : UseContractWriteConfig<typeof iMulticall3ABI, 'aggregate', TMode> & {
        abi?: never
        functionName?: 'aggregate'
      } = {} as any,
) {
  return useContractWrite<typeof iMulticall3ABI, 'aggregate', TMode>({
    abi: iMulticall3ABI,
    functionName: 'aggregate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"aggregate3"`.
 */
export function useIMulticall3Aggregate3<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iMulticall3ABI,
          'aggregate3'
        >['request']['abi'],
        'aggregate3',
        TMode
      > & { functionName?: 'aggregate3' }
    : UseContractWriteConfig<typeof iMulticall3ABI, 'aggregate3', TMode> & {
        abi?: never
        functionName?: 'aggregate3'
      } = {} as any,
) {
  return useContractWrite<typeof iMulticall3ABI, 'aggregate3', TMode>({
    abi: iMulticall3ABI,
    functionName: 'aggregate3',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"aggregate3Value"`.
 */
export function useIMulticall3Aggregate3Value<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iMulticall3ABI,
          'aggregate3Value'
        >['request']['abi'],
        'aggregate3Value',
        TMode
      > & { functionName?: 'aggregate3Value' }
    : UseContractWriteConfig<
        typeof iMulticall3ABI,
        'aggregate3Value',
        TMode
      > & {
        abi?: never
        functionName?: 'aggregate3Value'
      } = {} as any,
) {
  return useContractWrite<typeof iMulticall3ABI, 'aggregate3Value', TMode>({
    abi: iMulticall3ABI,
    functionName: 'aggregate3Value',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"blockAndAggregate"`.
 */
export function useIMulticall3BlockAndAggregate<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iMulticall3ABI,
          'blockAndAggregate'
        >['request']['abi'],
        'blockAndAggregate',
        TMode
      > & { functionName?: 'blockAndAggregate' }
    : UseContractWriteConfig<
        typeof iMulticall3ABI,
        'blockAndAggregate',
        TMode
      > & {
        abi?: never
        functionName?: 'blockAndAggregate'
      } = {} as any,
) {
  return useContractWrite<typeof iMulticall3ABI, 'blockAndAggregate', TMode>({
    abi: iMulticall3ABI,
    functionName: 'blockAndAggregate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"tryAggregate"`.
 */
export function useIMulticall3TryAggregate<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iMulticall3ABI,
          'tryAggregate'
        >['request']['abi'],
        'tryAggregate',
        TMode
      > & { functionName?: 'tryAggregate' }
    : UseContractWriteConfig<typeof iMulticall3ABI, 'tryAggregate', TMode> & {
        abi?: never
        functionName?: 'tryAggregate'
      } = {} as any,
) {
  return useContractWrite<typeof iMulticall3ABI, 'tryAggregate', TMode>({
    abi: iMulticall3ABI,
    functionName: 'tryAggregate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"tryBlockAndAggregate"`.
 */
export function useIMulticall3TryBlockAndAggregate<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iMulticall3ABI,
          'tryBlockAndAggregate'
        >['request']['abi'],
        'tryBlockAndAggregate',
        TMode
      > & { functionName?: 'tryBlockAndAggregate' }
    : UseContractWriteConfig<
        typeof iMulticall3ABI,
        'tryBlockAndAggregate',
        TMode
      > & {
        abi?: never
        functionName?: 'tryBlockAndAggregate'
      } = {} as any,
) {
  return useContractWrite<typeof iMulticall3ABI, 'tryBlockAndAggregate', TMode>(
    {
      abi: iMulticall3ABI,
      functionName: 'tryBlockAndAggregate',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__.
 */
export function usePrepareIMulticall3Write<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iMulticall3ABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMulticall3ABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iMulticall3ABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"aggregate"`.
 */
export function usePrepareIMulticall3Aggregate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'aggregate'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMulticall3ABI,
    functionName: 'aggregate',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'aggregate'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"aggregate3"`.
 */
export function usePrepareIMulticall3Aggregate3(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'aggregate3'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMulticall3ABI,
    functionName: 'aggregate3',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'aggregate3'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"aggregate3Value"`.
 */
export function usePrepareIMulticall3Aggregate3Value(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'aggregate3Value'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMulticall3ABI,
    functionName: 'aggregate3Value',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'aggregate3Value'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"blockAndAggregate"`.
 */
export function usePrepareIMulticall3BlockAndAggregate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'blockAndAggregate'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMulticall3ABI,
    functionName: 'blockAndAggregate',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iMulticall3ABI,
    'blockAndAggregate'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"tryAggregate"`.
 */
export function usePrepareIMulticall3TryAggregate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'tryAggregate'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMulticall3ABI,
    functionName: 'tryAggregate',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'tryAggregate'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"tryBlockAndAggregate"`.
 */
export function usePrepareIMulticall3TryBlockAndAggregate(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iMulticall3ABI,
      'tryBlockAndAggregate'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMulticall3ABI,
    functionName: 'tryBlockAndAggregate',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iMulticall3ABI,
    'tryBlockAndAggregate'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stdInvariantABI}__.
 */
export function useStdInvariantRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof stdInvariantABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stdInvariantABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: stdInvariantABI,
    ...config,
  } as UseContractReadConfig<
    typeof stdInvariantABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stdInvariantABI}__ and `functionName` set to `"excludeArtifacts"`.
 */
export function useStdInvariantExcludeArtifacts<
  TFunctionName extends 'excludeArtifacts',
  TSelectData = ReadContractResult<typeof stdInvariantABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stdInvariantABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stdInvariantABI,
    functionName: 'excludeArtifacts',
    ...config,
  } as UseContractReadConfig<
    typeof stdInvariantABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stdInvariantABI}__ and `functionName` set to `"excludeContracts"`.
 */
export function useStdInvariantExcludeContracts<
  TFunctionName extends 'excludeContracts',
  TSelectData = ReadContractResult<typeof stdInvariantABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stdInvariantABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stdInvariantABI,
    functionName: 'excludeContracts',
    ...config,
  } as UseContractReadConfig<
    typeof stdInvariantABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stdInvariantABI}__ and `functionName` set to `"excludeSenders"`.
 */
export function useStdInvariantExcludeSenders<
  TFunctionName extends 'excludeSenders',
  TSelectData = ReadContractResult<typeof stdInvariantABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stdInvariantABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stdInvariantABI,
    functionName: 'excludeSenders',
    ...config,
  } as UseContractReadConfig<
    typeof stdInvariantABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stdInvariantABI}__ and `functionName` set to `"targetArtifactSelectors"`.
 */
export function useStdInvariantTargetArtifactSelectors<
  TFunctionName extends 'targetArtifactSelectors',
  TSelectData = ReadContractResult<typeof stdInvariantABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stdInvariantABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stdInvariantABI,
    functionName: 'targetArtifactSelectors',
    ...config,
  } as UseContractReadConfig<
    typeof stdInvariantABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stdInvariantABI}__ and `functionName` set to `"targetArtifacts"`.
 */
export function useStdInvariantTargetArtifacts<
  TFunctionName extends 'targetArtifacts',
  TSelectData = ReadContractResult<typeof stdInvariantABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stdInvariantABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stdInvariantABI,
    functionName: 'targetArtifacts',
    ...config,
  } as UseContractReadConfig<
    typeof stdInvariantABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stdInvariantABI}__ and `functionName` set to `"targetContracts"`.
 */
export function useStdInvariantTargetContracts<
  TFunctionName extends 'targetContracts',
  TSelectData = ReadContractResult<typeof stdInvariantABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stdInvariantABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stdInvariantABI,
    functionName: 'targetContracts',
    ...config,
  } as UseContractReadConfig<
    typeof stdInvariantABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stdInvariantABI}__ and `functionName` set to `"targetSelectors"`.
 */
export function useStdInvariantTargetSelectors<
  TFunctionName extends 'targetSelectors',
  TSelectData = ReadContractResult<typeof stdInvariantABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stdInvariantABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stdInvariantABI,
    functionName: 'targetSelectors',
    ...config,
  } as UseContractReadConfig<
    typeof stdInvariantABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stdInvariantABI}__ and `functionName` set to `"targetSenders"`.
 */
export function useStdInvariantTargetSenders<
  TFunctionName extends 'targetSenders',
  TSelectData = ReadContractResult<typeof stdInvariantABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stdInvariantABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stdInvariantABI,
    functionName: 'targetSenders',
    ...config,
  } as UseContractReadConfig<
    typeof stdInvariantABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tankGameABI}__.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x4CF4dd3f71B67a7622ac250f8b10d266Dc5aEbcE)
 * -
 */
export function useTankGameRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof tankGameABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tankGameABI, TFunctionName, TSelectData>,
    'abi' | 'address'
  > & { chainId?: keyof typeof tankGameAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: tankGameABI,
    address: tankGameAddress[chainId as keyof typeof tankGameAddress],
    ...config,
  } as UseContractReadConfig<typeof tankGameABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tankGameABI}__ and `functionName` set to `"epochStart"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x4CF4dd3f71B67a7622ac250f8b10d266Dc5aEbcE)
 * -
 */
export function useTankGameEpochStart<
  TFunctionName extends 'epochStart',
  TSelectData = ReadContractResult<typeof tankGameABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tankGameABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof tankGameAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: tankGameABI,
    address: tankGameAddress[chainId as keyof typeof tankGameAddress],
    functionName: 'epochStart',
    ...config,
  } as UseContractReadConfig<typeof tankGameABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tankGameABI}__ and `functionName` set to `"getDistance"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x4CF4dd3f71B67a7622ac250f8b10d266Dc5aEbcE)
 * -
 */
export function useTankGameGetDistance<
  TFunctionName extends 'getDistance',
  TSelectData = ReadContractResult<typeof tankGameABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tankGameABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof tankGameAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: tankGameABI,
    address: tankGameAddress[chainId as keyof typeof tankGameAddress],
    functionName: 'getDistance',
    ...config,
  } as UseContractReadConfig<typeof tankGameABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tankGameABI}__ and `functionName` set to `"heartsOnBoard"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x4CF4dd3f71B67a7622ac250f8b10d266Dc5aEbcE)
 * -
 */
export function useTankGameHeartsOnBoard<
  TFunctionName extends 'heartsOnBoard',
  TSelectData = ReadContractResult<typeof tankGameABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tankGameABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof tankGameAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: tankGameABI,
    address: tankGameAddress[chainId as keyof typeof tankGameAddress],
    functionName: 'heartsOnBoard',
    ...config,
  } as UseContractReadConfig<typeof tankGameABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tankGameABI}__ and `functionName` set to `"lastActionTimestamp"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x4CF4dd3f71B67a7622ac250f8b10d266Dc5aEbcE)
 * -
 */
export function useTankGameLastActionTimestamp<
  TFunctionName extends 'lastActionTimestamp',
  TSelectData = ReadContractResult<typeof tankGameABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tankGameABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof tankGameAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: tankGameABI,
    address: tankGameAddress[chainId as keyof typeof tankGameAddress],
    functionName: 'lastActionTimestamp',
    ...config,
  } as UseContractReadConfig<typeof tankGameABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tankGameABI}__ and `functionName` set to `"lastDripEpoch"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x4CF4dd3f71B67a7622ac250f8b10d266Dc5aEbcE)
 * -
 */
export function useTankGameLastDripEpoch<
  TFunctionName extends 'lastDripEpoch',
  TSelectData = ReadContractResult<typeof tankGameABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tankGameABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof tankGameAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: tankGameABI,
    address: tankGameAddress[chainId as keyof typeof tankGameAddress],
    functionName: 'lastDripEpoch',
    ...config,
  } as UseContractReadConfig<typeof tankGameABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tankGameABI}__ and `functionName` set to `"numTanksAlive"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x4CF4dd3f71B67a7622ac250f8b10d266Dc5aEbcE)
 * -
 */
export function useTankGameNumTanksAlive<
  TFunctionName extends 'numTanksAlive',
  TSelectData = ReadContractResult<typeof tankGameABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tankGameABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof tankGameAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: tankGameABI,
    address: tankGameAddress[chainId as keyof typeof tankGameAddress],
    functionName: 'numTanksAlive',
    ...config,
  } as UseContractReadConfig<typeof tankGameABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tankGameABI}__ and `functionName` set to `"players"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x4CF4dd3f71B67a7622ac250f8b10d266Dc5aEbcE)
 * -
 */
export function useTankGamePlayers<
  TFunctionName extends 'players',
  TSelectData = ReadContractResult<typeof tankGameABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tankGameABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof tankGameAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: tankGameABI,
    address: tankGameAddress[chainId as keyof typeof tankGameAddress],
    functionName: 'players',
    ...config,
  } as UseContractReadConfig<typeof tankGameABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tankGameABI}__ and `functionName` set to `"playersCount"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x4CF4dd3f71B67a7622ac250f8b10d266Dc5aEbcE)
 * -
 */
export function useTankGamePlayersCount<
  TFunctionName extends 'playersCount',
  TSelectData = ReadContractResult<typeof tankGameABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tankGameABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof tankGameAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: tankGameABI,
    address: tankGameAddress[chainId as keyof typeof tankGameAddress],
    functionName: 'playersCount',
    ...config,
  } as UseContractReadConfig<typeof tankGameABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tankGameABI}__ and `functionName` set to `"podium"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x4CF4dd3f71B67a7622ac250f8b10d266Dc5aEbcE)
 * -
 */
export function useTankGamePodium<
  TFunctionName extends 'podium',
  TSelectData = ReadContractResult<typeof tankGameABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tankGameABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof tankGameAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: tankGameABI,
    address: tankGameAddress[chainId as keyof typeof tankGameAddress],
    functionName: 'podium',
    ...config,
  } as UseContractReadConfig<typeof tankGameABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tankGameABI}__ and `functionName` set to `"pointToIndex"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x4CF4dd3f71B67a7622ac250f8b10d266Dc5aEbcE)
 * -
 */
export function useTankGamePointToIndex<
  TFunctionName extends 'pointToIndex',
  TSelectData = ReadContractResult<typeof tankGameABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tankGameABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof tankGameAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: tankGameABI,
    address: tankGameAddress[chainId as keyof typeof tankGameAddress],
    functionName: 'pointToIndex',
    ...config,
  } as UseContractReadConfig<typeof tankGameABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tankGameABI}__ and `functionName` set to `"prizePool"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x4CF4dd3f71B67a7622ac250f8b10d266Dc5aEbcE)
 * -
 */
export function useTankGamePrizePool<
  TFunctionName extends 'prizePool',
  TSelectData = ReadContractResult<typeof tankGameABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tankGameABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof tankGameAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: tankGameABI,
    address: tankGameAddress[chainId as keyof typeof tankGameAddress],
    functionName: 'prizePool',
    ...config,
  } as UseContractReadConfig<typeof tankGameABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tankGameABI}__ and `functionName` set to `"settings"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x4CF4dd3f71B67a7622ac250f8b10d266Dc5aEbcE)
 * -
 */
export function useTankGameSettings<
  TFunctionName extends 'settings',
  TSelectData = ReadContractResult<typeof tankGameABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tankGameABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof tankGameAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: tankGameABI,
    address: tankGameAddress[chainId as keyof typeof tankGameAddress],
    functionName: 'settings',
    ...config,
  } as UseContractReadConfig<typeof tankGameABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tankGameABI}__ and `functionName` set to `"state"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x4CF4dd3f71B67a7622ac250f8b10d266Dc5aEbcE)
 * -
 */
export function useTankGameState<
  TFunctionName extends 'state',
  TSelectData = ReadContractResult<typeof tankGameABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tankGameABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof tankGameAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: tankGameABI,
    address: tankGameAddress[chainId as keyof typeof tankGameAddress],
    functionName: 'state',
    ...config,
  } as UseContractReadConfig<typeof tankGameABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tankGameABI}__ and `functionName` set to `"tankToPosition"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x4CF4dd3f71B67a7622ac250f8b10d266Dc5aEbcE)
 * -
 */
export function useTankGameTankToPosition<
  TFunctionName extends 'tankToPosition',
  TSelectData = ReadContractResult<typeof tankGameABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tankGameABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof tankGameAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: tankGameABI,
    address: tankGameAddress[chainId as keyof typeof tankGameAddress],
    functionName: 'tankToPosition',
    ...config,
  } as UseContractReadConfig<typeof tankGameABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tankGameABI}__ and `functionName` set to `"tanks"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x4CF4dd3f71B67a7622ac250f8b10d266Dc5aEbcE)
 * -
 */
export function useTankGameTanks<
  TFunctionName extends 'tanks',
  TSelectData = ReadContractResult<typeof tankGameABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tankGameABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof tankGameAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: tankGameABI,
    address: tankGameAddress[chainId as keyof typeof tankGameAddress],
    functionName: 'tanks',
    ...config,
  } as UseContractReadConfig<typeof tankGameABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tankGameABI}__ and `functionName` set to `"tanksOnBoard"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x4CF4dd3f71B67a7622ac250f8b10d266Dc5aEbcE)
 * -
 */
export function useTankGameTanksOnBoard<
  TFunctionName extends 'tanksOnBoard',
  TSelectData = ReadContractResult<typeof tankGameABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tankGameABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof tankGameAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: tankGameABI,
    address: tankGameAddress[chainId as keyof typeof tankGameAddress],
    functionName: 'tanksOnBoard',
    ...config,
  } as UseContractReadConfig<typeof tankGameABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tankGameABI}__ and `functionName` set to `"votedThisEpoch"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x4CF4dd3f71B67a7622ac250f8b10d266Dc5aEbcE)
 * -
 */
export function useTankGameVotedThisEpoch<
  TFunctionName extends 'votedThisEpoch',
  TSelectData = ReadContractResult<typeof tankGameABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tankGameABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof tankGameAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: tankGameABI,
    address: tankGameAddress[chainId as keyof typeof tankGameAddress],
    functionName: 'votedThisEpoch',
    ...config,
  } as UseContractReadConfig<typeof tankGameABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tankGameABI}__ and `functionName` set to `"votesPerEpoch"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x4CF4dd3f71B67a7622ac250f8b10d266Dc5aEbcE)
 * -
 */
export function useTankGameVotesPerEpoch<
  TFunctionName extends 'votesPerEpoch',
  TSelectData = ReadContractResult<typeof tankGameABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tankGameABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof tankGameAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: tankGameABI,
    address: tankGameAddress[chainId as keyof typeof tankGameAddress],
    functionName: 'votesPerEpoch',
    ...config,
  } as UseContractReadConfig<typeof tankGameABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tankGameABI}__.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x4CF4dd3f71B67a7622ac250f8b10d266Dc5aEbcE)
 * -
 */
export function useTankGameWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof tankGameAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof tankGameABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      > & { address?: Address; chainId?: TChainId }
    : UseContractWriteConfig<typeof tankGameABI, TFunctionName, TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof tankGameABI, TFunctionName, TMode>({
    abi: tankGameABI,
    address: tankGameAddress[chainId as keyof typeof tankGameAddress],
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tankGameABI}__ and `functionName` set to `"claim"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x4CF4dd3f71B67a7622ac250f8b10d266Dc5aEbcE)
 * -
 */
export function useTankGameClaim<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof tankGameAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof tankGameABI,
          'claim'
        >['request']['abi'],
        'claim',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'claim' }
    : UseContractWriteConfig<typeof tankGameABI, 'claim', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'claim'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof tankGameABI, 'claim', TMode>({
    abi: tankGameABI,
    address: tankGameAddress[chainId as keyof typeof tankGameAddress],
    functionName: 'claim',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tankGameABI}__ and `functionName` set to `"drip"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x4CF4dd3f71B67a7622ac250f8b10d266Dc5aEbcE)
 * -
 */
export function useTankGameDrip<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof tankGameAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof tankGameABI,
          'drip'
        >['request']['abi'],
        'drip',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'drip' }
    : UseContractWriteConfig<typeof tankGameABI, 'drip', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'drip'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof tankGameABI, 'drip', TMode>({
    abi: tankGameABI,
    address: tankGameAddress[chainId as keyof typeof tankGameAddress],
    functionName: 'drip',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tankGameABI}__ and `functionName` set to `"give"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x4CF4dd3f71B67a7622ac250f8b10d266Dc5aEbcE)
 * -
 */
export function useTankGameGive<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof tankGameAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof tankGameABI,
          'give'
        >['request']['abi'],
        'give',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'give' }
    : UseContractWriteConfig<typeof tankGameABI, 'give', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'give'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof tankGameABI, 'give', TMode>({
    abi: tankGameABI,
    address: tankGameAddress[chainId as keyof typeof tankGameAddress],
    functionName: 'give',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tankGameABI}__ and `functionName` set to `"init"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x4CF4dd3f71B67a7622ac250f8b10d266Dc5aEbcE)
 * -
 */
export function useTankGameInit<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof tankGameAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof tankGameABI,
          'init'
        >['request']['abi'],
        'init',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'init' }
    : UseContractWriteConfig<typeof tankGameABI, 'init', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'init'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof tankGameABI, 'init', TMode>({
    abi: tankGameABI,
    address: tankGameAddress[chainId as keyof typeof tankGameAddress],
    functionName: 'init',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tankGameABI}__ and `functionName` set to `"join"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x4CF4dd3f71B67a7622ac250f8b10d266Dc5aEbcE)
 * -
 */
export function useTankGameJoin<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof tankGameAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof tankGameABI,
          'join'
        >['request']['abi'],
        'join',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'join' }
    : UseContractWriteConfig<typeof tankGameABI, 'join', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'join'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof tankGameABI, 'join', TMode>({
    abi: tankGameABI,
    address: tankGameAddress[chainId as keyof typeof tankGameAddress],
    functionName: 'join',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tankGameABI}__ and `functionName` set to `"move"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x4CF4dd3f71B67a7622ac250f8b10d266Dc5aEbcE)
 * -
 */
export function useTankGameMove<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof tankGameAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof tankGameABI,
          'move'
        >['request']['abi'],
        'move',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'move' }
    : UseContractWriteConfig<typeof tankGameABI, 'move', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'move'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof tankGameABI, 'move', TMode>({
    abi: tankGameABI,
    address: tankGameAddress[chainId as keyof typeof tankGameAddress],
    functionName: 'move',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tankGameABI}__ and `functionName` set to `"shoot"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x4CF4dd3f71B67a7622ac250f8b10d266Dc5aEbcE)
 * -
 */
export function useTankGameShoot<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof tankGameAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof tankGameABI,
          'shoot'
        >['request']['abi'],
        'shoot',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'shoot' }
    : UseContractWriteConfig<typeof tankGameABI, 'shoot', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'shoot'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof tankGameABI, 'shoot', TMode>({
    abi: tankGameABI,
    address: tankGameAddress[chainId as keyof typeof tankGameAddress],
    functionName: 'shoot',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tankGameABI}__ and `functionName` set to `"upgrade"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x4CF4dd3f71B67a7622ac250f8b10d266Dc5aEbcE)
 * -
 */
export function useTankGameUpgrade<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof tankGameAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof tankGameABI,
          'upgrade'
        >['request']['abi'],
        'upgrade',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'upgrade' }
    : UseContractWriteConfig<typeof tankGameABI, 'upgrade', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'upgrade'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof tankGameABI, 'upgrade', TMode>({
    abi: tankGameABI,
    address: tankGameAddress[chainId as keyof typeof tankGameAddress],
    functionName: 'upgrade',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tankGameABI}__ and `functionName` set to `"vote"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x4CF4dd3f71B67a7622ac250f8b10d266Dc5aEbcE)
 * -
 */
export function useTankGameVote<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof tankGameAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof tankGameABI,
          'vote'
        >['request']['abi'],
        'vote',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'vote' }
    : UseContractWriteConfig<typeof tankGameABI, 'vote', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'vote'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof tankGameABI, 'vote', TMode>({
    abi: tankGameABI,
    address: tankGameAddress[chainId as keyof typeof tankGameAddress],
    functionName: 'vote',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tankGameABI}__.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x4CF4dd3f71B67a7622ac250f8b10d266Dc5aEbcE)
 * -
 */
export function usePrepareTankGameWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tankGameABI, TFunctionName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof tankGameAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: tankGameABI,
    address: tankGameAddress[chainId as keyof typeof tankGameAddress],
    ...config,
  } as UsePrepareContractWriteConfig<typeof tankGameABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tankGameABI}__ and `functionName` set to `"claim"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x4CF4dd3f71B67a7622ac250f8b10d266Dc5aEbcE)
 * -
 */
export function usePrepareTankGameClaim(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tankGameABI, 'claim'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof tankGameAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: tankGameABI,
    address: tankGameAddress[chainId as keyof typeof tankGameAddress],
    functionName: 'claim',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tankGameABI, 'claim'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tankGameABI}__ and `functionName` set to `"drip"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x4CF4dd3f71B67a7622ac250f8b10d266Dc5aEbcE)
 * -
 */
export function usePrepareTankGameDrip(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tankGameABI, 'drip'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof tankGameAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: tankGameABI,
    address: tankGameAddress[chainId as keyof typeof tankGameAddress],
    functionName: 'drip',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tankGameABI, 'drip'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tankGameABI}__ and `functionName` set to `"give"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x4CF4dd3f71B67a7622ac250f8b10d266Dc5aEbcE)
 * -
 */
export function usePrepareTankGameGive(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tankGameABI, 'give'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof tankGameAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: tankGameABI,
    address: tankGameAddress[chainId as keyof typeof tankGameAddress],
    functionName: 'give',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tankGameABI, 'give'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tankGameABI}__ and `functionName` set to `"init"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x4CF4dd3f71B67a7622ac250f8b10d266Dc5aEbcE)
 * -
 */
export function usePrepareTankGameInit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tankGameABI, 'init'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof tankGameAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: tankGameABI,
    address: tankGameAddress[chainId as keyof typeof tankGameAddress],
    functionName: 'init',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tankGameABI, 'init'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tankGameABI}__ and `functionName` set to `"join"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x4CF4dd3f71B67a7622ac250f8b10d266Dc5aEbcE)
 * -
 */
export function usePrepareTankGameJoin(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tankGameABI, 'join'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof tankGameAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: tankGameABI,
    address: tankGameAddress[chainId as keyof typeof tankGameAddress],
    functionName: 'join',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tankGameABI, 'join'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tankGameABI}__ and `functionName` set to `"move"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x4CF4dd3f71B67a7622ac250f8b10d266Dc5aEbcE)
 * -
 */
export function usePrepareTankGameMove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tankGameABI, 'move'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof tankGameAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: tankGameABI,
    address: tankGameAddress[chainId as keyof typeof tankGameAddress],
    functionName: 'move',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tankGameABI, 'move'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tankGameABI}__ and `functionName` set to `"shoot"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x4CF4dd3f71B67a7622ac250f8b10d266Dc5aEbcE)
 * -
 */
export function usePrepareTankGameShoot(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tankGameABI, 'shoot'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof tankGameAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: tankGameABI,
    address: tankGameAddress[chainId as keyof typeof tankGameAddress],
    functionName: 'shoot',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tankGameABI, 'shoot'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tankGameABI}__ and `functionName` set to `"upgrade"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x4CF4dd3f71B67a7622ac250f8b10d266Dc5aEbcE)
 * -
 */
export function usePrepareTankGameUpgrade(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tankGameABI, 'upgrade'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof tankGameAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: tankGameABI,
    address: tankGameAddress[chainId as keyof typeof tankGameAddress],
    functionName: 'upgrade',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tankGameABI, 'upgrade'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tankGameABI}__ and `functionName` set to `"vote"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x4CF4dd3f71B67a7622ac250f8b10d266Dc5aEbcE)
 * -
 */
export function usePrepareTankGameVote(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tankGameABI, 'vote'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof tankGameAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: tankGameABI,
    address: tankGameAddress[chainId as keyof typeof tankGameAddress],
    functionName: 'vote',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tankGameABI, 'vote'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tankGameABI}__.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x4CF4dd3f71B67a7622ac250f8b10d266Dc5aEbcE)
 * -
 */
export function useTankGameEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof tankGameABI, TEventName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof tankGameAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: tankGameABI,
    address: tankGameAddress[chainId as keyof typeof tankGameAddress],
    ...config,
  } as UseContractEventConfig<typeof tankGameABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tankGameABI}__ and `eventName` set to `"Claim"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x4CF4dd3f71B67a7622ac250f8b10d266Dc5aEbcE)
 * -
 */
export function useTankGameClaimEvent(
  config: Omit<
    UseContractEventConfig<typeof tankGameABI, 'Claim'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof tankGameAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: tankGameABI,
    address: tankGameAddress[chainId as keyof typeof tankGameAddress],
    eventName: 'Claim',
    ...config,
  } as UseContractEventConfig<typeof tankGameABI, 'Claim'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tankGameABI}__ and `eventName` set to `"Drip"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x4CF4dd3f71B67a7622ac250f8b10d266Dc5aEbcE)
 * -
 */
export function useTankGameDripEvent(
  config: Omit<
    UseContractEventConfig<typeof tankGameABI, 'Drip'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof tankGameAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: tankGameABI,
    address: tankGameAddress[chainId as keyof typeof tankGameAddress],
    eventName: 'Drip',
    ...config,
  } as UseContractEventConfig<typeof tankGameABI, 'Drip'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tankGameABI}__ and `eventName` set to `"GameStarted"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x4CF4dd3f71B67a7622ac250f8b10d266Dc5aEbcE)
 * -
 */
export function useTankGameGameStartedEvent(
  config: Omit<
    UseContractEventConfig<typeof tankGameABI, 'GameStarted'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof tankGameAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: tankGameABI,
    address: tankGameAddress[chainId as keyof typeof tankGameAddress],
    eventName: 'GameStarted',
    ...config,
  } as UseContractEventConfig<typeof tankGameABI, 'GameStarted'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tankGameABI}__ and `eventName` set to `"Give"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x4CF4dd3f71B67a7622ac250f8b10d266Dc5aEbcE)
 * -
 */
export function useTankGameGiveEvent(
  config: Omit<
    UseContractEventConfig<typeof tankGameABI, 'Give'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof tankGameAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: tankGameABI,
    address: tankGameAddress[chainId as keyof typeof tankGameAddress],
    eventName: 'Give',
    ...config,
  } as UseContractEventConfig<typeof tankGameABI, 'Give'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tankGameABI}__ and `eventName` set to `"Move"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x4CF4dd3f71B67a7622ac250f8b10d266Dc5aEbcE)
 * -
 */
export function useTankGameMoveEvent(
  config: Omit<
    UseContractEventConfig<typeof tankGameABI, 'Move'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof tankGameAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: tankGameABI,
    address: tankGameAddress[chainId as keyof typeof tankGameAddress],
    eventName: 'Move',
    ...config,
  } as UseContractEventConfig<typeof tankGameABI, 'Move'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tankGameABI}__ and `eventName` set to `"PlayerJoined"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x4CF4dd3f71B67a7622ac250f8b10d266Dc5aEbcE)
 * -
 */
export function useTankGamePlayerJoinedEvent(
  config: Omit<
    UseContractEventConfig<typeof tankGameABI, 'PlayerJoined'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof tankGameAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: tankGameABI,
    address: tankGameAddress[chainId as keyof typeof tankGameAddress],
    eventName: 'PlayerJoined',
    ...config,
  } as UseContractEventConfig<typeof tankGameABI, 'PlayerJoined'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tankGameABI}__ and `eventName` set to `"Shoot"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x4CF4dd3f71B67a7622ac250f8b10d266Dc5aEbcE)
 * -
 */
export function useTankGameShootEvent(
  config: Omit<
    UseContractEventConfig<typeof tankGameABI, 'Shoot'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof tankGameAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: tankGameABI,
    address: tankGameAddress[chainId as keyof typeof tankGameAddress],
    eventName: 'Shoot',
    ...config,
  } as UseContractEventConfig<typeof tankGameABI, 'Shoot'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tankGameABI}__ and `eventName` set to `"Upgrade"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x4CF4dd3f71B67a7622ac250f8b10d266Dc5aEbcE)
 * -
 */
export function useTankGameUpgradeEvent(
  config: Omit<
    UseContractEventConfig<typeof tankGameABI, 'Upgrade'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof tankGameAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: tankGameABI,
    address: tankGameAddress[chainId as keyof typeof tankGameAddress],
    eventName: 'Upgrade',
    ...config,
  } as UseContractEventConfig<typeof tankGameABI, 'Upgrade'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tankGameABI}__ and `eventName` set to `"Vote"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x4CF4dd3f71B67a7622ac250f8b10d266Dc5aEbcE)
 * -
 */
export function useTankGameVoteEvent(
  config: Omit<
    UseContractEventConfig<typeof tankGameABI, 'Vote'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof tankGameAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: tankGameABI,
    address: tankGameAddress[chainId as keyof typeof tankGameAddress],
    eventName: 'Vote',
    ...config,
  } as UseContractEventConfig<typeof tankGameABI, 'Vote'>)
}
