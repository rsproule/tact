// Generated by @wagmi/cli@1.2.0 on 7/2/2023 at 10:10:44â€¯AM
import {
  useContractWrite,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useContractRead,
  UseContractReadConfig,
  useContractEvent,
  UseContractEventConfig,
  useNetwork,
  Address,
} from 'wagmi'
import {
  WriteContractMode,
  PrepareWriteContractResult,
  ReadContractResult,
} from 'wagmi/actions'

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Deployer
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const deployerABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: '_zksolcVersion', internalType: 'string', type: 'string' },
      { name: '_diamondProxy', internalType: 'address', type: 'address' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'fileName', internalType: 'string', type: 'string' },
      { name: 'params', internalType: 'bytes', type: 'bytes' },
      { name: 'salt', internalType: 'bytes32', type: 'bytes32' },
      { name: 'gasLimit', internalType: 'uint256', type: 'uint256' },
      {
        name: 'l2GasPerPubdataByteLimit',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'deployFromL1',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'fileName', internalType: 'string', type: 'string' },
      { name: 'params', internalType: 'bytes', type: 'bytes' },
      { name: 'salt', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'deployFromL1',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IContractDeployer
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iContractDeployerABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_salt', internalType: 'bytes32', type: 'bytes32' },
      { name: '_bytecodeHash', internalType: 'bytes32', type: 'bytes32' },
      { name: '_input', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'create2',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IAllowList
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iAllowListABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'target',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'previousMode',
        internalType: 'enum IAllowList.AccessMode',
        type: 'uint8',
        indexed: false,
      },
      {
        name: 'newMode',
        internalType: 'enum IAllowList.AccessMode',
        type: 'uint8',
        indexed: false,
      },
    ],
    name: 'UpdateAccessMode',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'caller',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'target',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'functionSig',
        internalType: 'bytes4',
        type: 'bytes4',
        indexed: true,
      },
      { name: 'status', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'UpdateCallPermission',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_caller', internalType: 'address', type: 'address' },
      { name: '_target', internalType: 'address', type: 'address' },
      { name: '_functionSig', internalType: 'bytes4', type: 'bytes4' },
    ],
    name: 'canCall',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_target', internalType: 'address', type: 'address' }],
    name: 'getAccessMode',
    outputs: [
      { name: '', internalType: 'enum IAllowList.AccessMode', type: 'uint8' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_l1Token', internalType: 'address', type: 'address' }],
    name: 'getTokenDepositLimitData',
    outputs: [
      {
        name: '',
        internalType: 'struct IAllowList.Deposit',
        type: 'tuple',
        components: [
          { name: 'depositLimitation', internalType: 'bool', type: 'bool' },
          { name: 'depositCap', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_caller', internalType: 'address', type: 'address' },
      { name: '_target', internalType: 'address', type: 'address' },
      { name: '_functionSig', internalType: 'bytes4', type: 'bytes4' },
    ],
    name: 'hasSpecialAccessToCall',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_target', internalType: 'address', type: 'address' },
      {
        name: '_accessMode',
        internalType: 'enum IAllowList.AccessMode',
        type: 'uint8',
      },
    ],
    name: 'setAccessMode',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_targets', internalType: 'address[]', type: 'address[]' },
      {
        name: '_accessMode',
        internalType: 'enum IAllowList.AccessMode[]',
        type: 'uint8[]',
      },
    ],
    name: 'setBatchAccessMode',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_callers', internalType: 'address[]', type: 'address[]' },
      { name: '_targets', internalType: 'address[]', type: 'address[]' },
      { name: '_functionSigs', internalType: 'bytes4[]', type: 'bytes4[]' },
      { name: '_enables', internalType: 'bool[]', type: 'bool[]' },
    ],
    name: 'setBatchPermissionToCall',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_l1Token', internalType: 'address', type: 'address' },
      { name: '_depositLimitation', internalType: 'bool', type: 'bool' },
      { name: '_depositCap', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setDepositLimit',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_caller', internalType: 'address', type: 'address' },
      { name: '_target', internalType: 'address', type: 'address' },
      { name: '_functionSig', internalType: 'bytes4', type: 'bytes4' },
      { name: '_enable', internalType: 'bool', type: 'bool' },
    ],
    name: 'setPermissionToCall',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IDeployer
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iDeployerABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'fileName', internalType: 'string', type: 'string' },
      { name: 'params', internalType: 'bytes', type: 'bytes' },
      { name: 'salt', internalType: 'bytes32', type: 'bytes32' },
      { name: 'gasLimit', internalType: 'uint256', type: 'uint256' },
      {
        name: 'l2GasPerPubdataByteLimit',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'deployFromL1',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'fileName', internalType: 'string', type: 'string' },
      { name: 'params', internalType: 'bytes', type: 'bytes' },
      { name: 'salt', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'deployFromL1',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IMailbox
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iMailboxABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'EthWithdrawalFinalized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'txId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'txHash',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: false,
      },
      {
        name: 'expirationTimestamp',
        internalType: 'uint64',
        type: 'uint64',
        indexed: false,
      },
      {
        name: 'transaction',
        internalType: 'struct IMailbox.L2CanonicalTransaction',
        type: 'tuple',
        components: [
          { name: 'txType', internalType: 'uint256', type: 'uint256' },
          { name: 'from', internalType: 'uint256', type: 'uint256' },
          { name: 'to', internalType: 'uint256', type: 'uint256' },
          { name: 'gasLimit', internalType: 'uint256', type: 'uint256' },
          {
            name: 'gasPerPubdataByteLimit',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'maxFeePerGas', internalType: 'uint256', type: 'uint256' },
          {
            name: 'maxPriorityFeePerGas',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'paymaster', internalType: 'uint256', type: 'uint256' },
          { name: 'nonce', internalType: 'uint256', type: 'uint256' },
          { name: 'value', internalType: 'uint256', type: 'uint256' },
          { name: 'reserved', internalType: 'uint256[4]', type: 'uint256[4]' },
          { name: 'data', internalType: 'bytes', type: 'bytes' },
          { name: 'signature', internalType: 'bytes', type: 'bytes' },
          { name: 'factoryDeps', internalType: 'uint256[]', type: 'uint256[]' },
          { name: 'paymasterInput', internalType: 'bytes', type: 'bytes' },
          { name: 'reservedDynamic', internalType: 'bytes', type: 'bytes' },
        ],
        indexed: false,
      },
      {
        name: 'factoryDeps',
        internalType: 'bytes[]',
        type: 'bytes[]',
        indexed: false,
      },
    ],
    name: 'NewPriorityRequest',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_l2BlockNumber', internalType: 'uint256', type: 'uint256' },
      { name: '_l2MessageIndex', internalType: 'uint256', type: 'uint256' },
      { name: '_l2TxNumberInBlock', internalType: 'uint16', type: 'uint16' },
      { name: '_message', internalType: 'bytes', type: 'bytes' },
      { name: '_merkleProof', internalType: 'bytes32[]', type: 'bytes32[]' },
    ],
    name: 'finalizeEthWithdrawal',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_gasPrice', internalType: 'uint256', type: 'uint256' },
      { name: '_l2GasLimit', internalType: 'uint256', type: 'uint256' },
      {
        name: '_l2GasPerPubdataByteLimit',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'l2TransactionBaseCost',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_l2TxHash', internalType: 'bytes32', type: 'bytes32' },
      { name: '_l2BlockNumber', internalType: 'uint256', type: 'uint256' },
      { name: '_l2MessageIndex', internalType: 'uint256', type: 'uint256' },
      { name: '_l2TxNumberInBlock', internalType: 'uint16', type: 'uint16' },
      { name: '_merkleProof', internalType: 'bytes32[]', type: 'bytes32[]' },
      { name: '_status', internalType: 'enum TxStatus', type: 'uint8' },
    ],
    name: 'proveL1ToL2TransactionStatus',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_blockNumber', internalType: 'uint256', type: 'uint256' },
      { name: '_index', internalType: 'uint256', type: 'uint256' },
      {
        name: '_log',
        internalType: 'struct L2Log',
        type: 'tuple',
        components: [
          { name: 'l2ShardId', internalType: 'uint8', type: 'uint8' },
          { name: 'isService', internalType: 'bool', type: 'bool' },
          { name: 'txNumberInBlock', internalType: 'uint16', type: 'uint16' },
          { name: 'sender', internalType: 'address', type: 'address' },
          { name: 'key', internalType: 'bytes32', type: 'bytes32' },
          { name: 'value', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
      { name: '_proof', internalType: 'bytes32[]', type: 'bytes32[]' },
    ],
    name: 'proveL2LogInclusion',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_blockNumber', internalType: 'uint256', type: 'uint256' },
      { name: '_index', internalType: 'uint256', type: 'uint256' },
      {
        name: '_message',
        internalType: 'struct L2Message',
        type: 'tuple',
        components: [
          { name: 'txNumberInBlock', internalType: 'uint16', type: 'uint16' },
          { name: 'sender', internalType: 'address', type: 'address' },
          { name: 'data', internalType: 'bytes', type: 'bytes' },
        ],
      },
      { name: '_proof', internalType: 'bytes32[]', type: 'bytes32[]' },
    ],
    name: 'proveL2MessageInclusion',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: '_contractL2', internalType: 'address', type: 'address' },
      { name: '_l2Value', internalType: 'uint256', type: 'uint256' },
      { name: '_calldata', internalType: 'bytes', type: 'bytes' },
      { name: '_l2GasLimit', internalType: 'uint256', type: 'uint256' },
      {
        name: '_l2GasPerPubdataByteLimit',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: '_factoryDeps', internalType: 'bytes[]', type: 'bytes[]' },
      { name: '_refundRecipient', internalType: 'address', type: 'address' },
    ],
    name: 'requestL2Transaction',
    outputs: [
      { name: 'canonicalTxHash', internalType: 'bytes32', type: 'bytes32' },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IMulticall3
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iMulticall3ABI = [
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'calls',
        internalType: 'struct IMulticall3.Call[]',
        type: 'tuple[]',
        components: [
          { name: 'target', internalType: 'address', type: 'address' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'aggregate',
    outputs: [
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
      { name: 'returnData', internalType: 'bytes[]', type: 'bytes[]' },
    ],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'calls',
        internalType: 'struct IMulticall3.Call3[]',
        type: 'tuple[]',
        components: [
          { name: 'target', internalType: 'address', type: 'address' },
          { name: 'allowFailure', internalType: 'bool', type: 'bool' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'aggregate3',
    outputs: [
      {
        name: 'returnData',
        internalType: 'struct IMulticall3.Result[]',
        type: 'tuple[]',
        components: [
          { name: 'success', internalType: 'bool', type: 'bool' },
          { name: 'returnData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'calls',
        internalType: 'struct IMulticall3.Call3Value[]',
        type: 'tuple[]',
        components: [
          { name: 'target', internalType: 'address', type: 'address' },
          { name: 'allowFailure', internalType: 'bool', type: 'bool' },
          { name: 'value', internalType: 'uint256', type: 'uint256' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'aggregate3Value',
    outputs: [
      {
        name: 'returnData',
        internalType: 'struct IMulticall3.Result[]',
        type: 'tuple[]',
        components: [
          { name: 'success', internalType: 'bool', type: 'bool' },
          { name: 'returnData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'calls',
        internalType: 'struct IMulticall3.Call[]',
        type: 'tuple[]',
        components: [
          { name: 'target', internalType: 'address', type: 'address' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'blockAndAggregate',
    outputs: [
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
      { name: 'blockHash', internalType: 'bytes32', type: 'bytes32' },
      {
        name: 'returnData',
        internalType: 'struct IMulticall3.Result[]',
        type: 'tuple[]',
        components: [
          { name: 'success', internalType: 'bool', type: 'bool' },
          { name: 'returnData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getBasefee',
    outputs: [{ name: 'basefee', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'getBlockHash',
    outputs: [{ name: 'blockHash', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getBlockNumber',
    outputs: [
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getChainId',
    outputs: [{ name: 'chainid', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getCurrentBlockCoinbase',
    outputs: [{ name: 'coinbase', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getCurrentBlockDifficulty',
    outputs: [{ name: 'difficulty', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getCurrentBlockGasLimit',
    outputs: [{ name: 'gaslimit', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getCurrentBlockTimestamp',
    outputs: [{ name: 'timestamp', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'getEthBalance',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getLastBlockHash',
    outputs: [{ name: 'blockHash', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'requireSuccess', internalType: 'bool', type: 'bool' },
      {
        name: 'calls',
        internalType: 'struct IMulticall3.Call[]',
        type: 'tuple[]',
        components: [
          { name: 'target', internalType: 'address', type: 'address' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'tryAggregate',
    outputs: [
      {
        name: 'returnData',
        internalType: 'struct IMulticall3.Result[]',
        type: 'tuple[]',
        components: [
          { name: 'success', internalType: 'bool', type: 'bool' },
          { name: 'returnData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'requireSuccess', internalType: 'bool', type: 'bool' },
      {
        name: 'calls',
        internalType: 'struct IMulticall3.Call[]',
        type: 'tuple[]',
        components: [
          { name: 'target', internalType: 'address', type: 'address' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'tryBlockAndAggregate',
    outputs: [
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
      { name: 'blockHash', internalType: 'bytes32', type: 'bytes32' },
      {
        name: 'returnData',
        internalType: 'struct IMulticall3.Result[]',
        type: 'tuple[]',
        components: [
          { name: 'success', internalType: 'bool', type: 'bool' },
          { name: 'returnData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ITankGame
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iTankGameABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tankId', internalType: 'uint256', type: 'uint256' },
      { name: 'claimer', internalType: 'address', type: 'address' },
    ],
    name: 'claim',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'tankId', internalType: 'uint256', type: 'uint256' }],
    name: 'drip',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'fromId', internalType: 'uint256', type: 'uint256' },
      { name: 'toId', internalType: 'uint256', type: 'uint256' },
      { name: 'hearts', internalType: 'uint256', type: 'uint256' },
      { name: 'aps', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'give',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [],
    name: 'join',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'fromId', internalType: 'uint256', type: 'uint256' },
      {
        name: 'to',
        internalType: 'struct ITankGame.Point',
        type: 'tuple',
        components: [
          { name: 'x', internalType: 'uint256', type: 'uint256' },
          { name: 'y', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
    name: 'move',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'settings',
    outputs: [
      {
        name: '',
        internalType: 'struct ITankGame.GameSettings',
        type: 'tuple',
        components: [
          { name: 'playerCount', internalType: 'uint256', type: 'uint256' },
          { name: 'boardSize', internalType: 'uint256', type: 'uint256' },
          { name: 'initAPs', internalType: 'uint256', type: 'uint256' },
          { name: 'initHearts', internalType: 'uint256', type: 'uint256' },
          { name: 'voteThreshold', internalType: 'uint256', type: 'uint256' },
          { name: 'initShootRange', internalType: 'uint256', type: 'uint256' },
          { name: 'upgradeCost', internalType: 'uint256', type: 'uint256' },
          { name: 'epochSeconds', internalType: 'uint256', type: 'uint256' },
          {
            name: 'actionDelaySeconds',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'fromId', internalType: 'uint256', type: 'uint256' },
      { name: 'toId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'shoot',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'tankId', internalType: 'uint256', type: 'uint256' }],
    name: 'upgrade',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'voter', internalType: 'uint256', type: 'uint256' },
      { name: 'cursed', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'vote',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Plonk4VerifierWithAccessToDNext
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const plonk4VerifierWithAccessToDNextABI = [
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      {
        name: 'state',
        internalType:
          'struct Plonk4VerifierWithAccessToDNext.PartialVerifierState',
        type: 'tuple',
        components: [
          {
            name: 'zero',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'alpha',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'beta',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'gamma',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'alpha_values',
            internalType: 'struct PairingsBn254.Fr[9]',
            type: 'tuple[9]',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'eta',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'beta_lookup',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'gamma_lookup',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'beta_plus_one',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'beta_gamma',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'v',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'u',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'z',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'z_omega',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'z_minus_last_omega',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'l_0_at_z',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'l_n_minus_one_at_z',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 't',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'tp',
            internalType: 'struct PairingsBn254.G1Point',
            type: 'tuple',
            components: [
              { name: 'X', internalType: 'uint256', type: 'uint256' },
              { name: 'Y', internalType: 'uint256', type: 'uint256' },
            ],
          },
        ],
      },
    ],
    name: 'compute_powers_of_alpha',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      {
        name: 'vk',
        internalType: 'struct VerificationKey',
        type: 'tuple',
        components: [
          { name: 'domain_size', internalType: 'uint256', type: 'uint256' },
          { name: 'num_inputs', internalType: 'uint256', type: 'uint256' },
          {
            name: 'omega',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'gate_selectors_commitments',
            internalType: 'struct PairingsBn254.G1Point[2]',
            type: 'tuple[2]',
            components: [
              { name: 'X', internalType: 'uint256', type: 'uint256' },
              { name: 'Y', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'gate_setup_commitments',
            internalType: 'struct PairingsBn254.G1Point[8]',
            type: 'tuple[8]',
            components: [
              { name: 'X', internalType: 'uint256', type: 'uint256' },
              { name: 'Y', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'permutation_commitments',
            internalType: 'struct PairingsBn254.G1Point[4]',
            type: 'tuple[4]',
            components: [
              { name: 'X', internalType: 'uint256', type: 'uint256' },
              { name: 'Y', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'lookup_selector_commitment',
            internalType: 'struct PairingsBn254.G1Point',
            type: 'tuple',
            components: [
              { name: 'X', internalType: 'uint256', type: 'uint256' },
              { name: 'Y', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'lookup_tables_commitments',
            internalType: 'struct PairingsBn254.G1Point[4]',
            type: 'tuple[4]',
            components: [
              { name: 'X', internalType: 'uint256', type: 'uint256' },
              { name: 'Y', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'lookup_table_type_commitment',
            internalType: 'struct PairingsBn254.G1Point',
            type: 'tuple',
            components: [
              { name: 'X', internalType: 'uint256', type: 'uint256' },
              { name: 'Y', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'non_residues',
            internalType: 'struct PairingsBn254.Fr[3]',
            type: 'tuple[3]',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'g2_elements',
            internalType: 'struct PairingsBn254.G2Point[2]',
            type: 'tuple[2]',
            components: [
              { name: 'X', internalType: 'uint256[2]', type: 'uint256[2]' },
              { name: 'Y', internalType: 'uint256[2]', type: 'uint256[2]' },
            ],
          },
        ],
      },
      {
        name: 'proof',
        internalType: 'struct Plonk4VerifierWithAccessToDNext.Proof',
        type: 'tuple',
        components: [
          {
            name: 'input_values',
            internalType: 'uint256[]',
            type: 'uint256[]',
          },
          {
            name: 'state_polys_commitments',
            internalType: 'struct PairingsBn254.G1Point[4]',
            type: 'tuple[4]',
            components: [
              { name: 'X', internalType: 'uint256', type: 'uint256' },
              { name: 'Y', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'copy_permutation_grand_product_commitment',
            internalType: 'struct PairingsBn254.G1Point',
            type: 'tuple',
            components: [
              { name: 'X', internalType: 'uint256', type: 'uint256' },
              { name: 'Y', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'quotient_poly_parts_commitments',
            internalType: 'struct PairingsBn254.G1Point[4]',
            type: 'tuple[4]',
            components: [
              { name: 'X', internalType: 'uint256', type: 'uint256' },
              { name: 'Y', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'state_polys_openings_at_z',
            internalType: 'struct PairingsBn254.Fr[4]',
            type: 'tuple[4]',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'state_polys_openings_at_z_omega',
            internalType: 'struct PairingsBn254.Fr[1]',
            type: 'tuple[1]',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'gate_selectors_openings_at_z',
            internalType: 'struct PairingsBn254.Fr[1]',
            type: 'tuple[1]',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'copy_permutation_polys_openings_at_z',
            internalType: 'struct PairingsBn254.Fr[3]',
            type: 'tuple[3]',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'copy_permutation_grand_product_opening_at_z_omega',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'quotient_poly_opening_at_z',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'linearization_poly_opening_at_z',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'lookup_s_poly_commitment',
            internalType: 'struct PairingsBn254.G1Point',
            type: 'tuple',
            components: [
              { name: 'X', internalType: 'uint256', type: 'uint256' },
              { name: 'Y', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'lookup_grand_product_commitment',
            internalType: 'struct PairingsBn254.G1Point',
            type: 'tuple',
            components: [
              { name: 'X', internalType: 'uint256', type: 'uint256' },
              { name: 'Y', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'lookup_s_poly_opening_at_z_omega',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'lookup_grand_product_opening_at_z_omega',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'lookup_t_poly_opening_at_z',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'lookup_t_poly_opening_at_z_omega',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'lookup_selector_poly_opening_at_z',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'lookup_table_type_poly_opening_at_z',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'opening_proof_at_z',
            internalType: 'struct PairingsBn254.G1Point',
            type: 'tuple',
            components: [
              { name: 'X', internalType: 'uint256', type: 'uint256' },
              { name: 'Y', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'opening_proof_at_z_omega',
            internalType: 'struct PairingsBn254.G1Point',
            type: 'tuple',
            components: [
              { name: 'X', internalType: 'uint256', type: 'uint256' },
              { name: 'Y', internalType: 'uint256', type: 'uint256' },
            ],
          },
        ],
      },
      {
        name: 'state',
        internalType:
          'struct Plonk4VerifierWithAccessToDNext.PartialVerifierState',
        type: 'tuple',
        components: [
          {
            name: 'zero',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'alpha',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'beta',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'gamma',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'alpha_values',
            internalType: 'struct PairingsBn254.Fr[9]',
            type: 'tuple[9]',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'eta',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'beta_lookup',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'gamma_lookup',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'beta_plus_one',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'beta_gamma',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'v',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'u',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'z',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'z_omega',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'z_minus_last_omega',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'l_0_at_z',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'l_n_minus_one_at_z',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 't',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'tp',
            internalType: 'struct PairingsBn254.G1Point',
            type: 'tuple',
            components: [
              { name: 'X', internalType: 'uint256', type: 'uint256' },
              { name: 'Y', internalType: 'uint256', type: 'uint256' },
            ],
          },
        ],
      },
    ],
    name: 'prepare_queries',
    outputs: [
      {
        name: 'queries',
        internalType: 'struct Plonk4VerifierWithAccessToDNext.Queries',
        type: 'tuple',
        components: [
          {
            name: 'commitments_at_z',
            internalType: 'struct PairingsBn254.G1Point[13]',
            type: 'tuple[13]',
            components: [
              { name: 'X', internalType: 'uint256', type: 'uint256' },
              { name: 'Y', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'values_at_z',
            internalType: 'struct PairingsBn254.Fr[13]',
            type: 'tuple[13]',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'commitments_at_z_omega',
            internalType: 'struct PairingsBn254.G1Point[6]',
            type: 'tuple[6]',
            components: [
              { name: 'X', internalType: 'uint256', type: 'uint256' },
              { name: 'Y', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'values_at_z_omega',
            internalType: 'struct PairingsBn254.Fr[6]',
            type: 'tuple[6]',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      {
        name: 'vk',
        internalType: 'struct VerificationKey',
        type: 'tuple',
        components: [
          { name: 'domain_size', internalType: 'uint256', type: 'uint256' },
          { name: 'num_inputs', internalType: 'uint256', type: 'uint256' },
          {
            name: 'omega',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'gate_selectors_commitments',
            internalType: 'struct PairingsBn254.G1Point[2]',
            type: 'tuple[2]',
            components: [
              { name: 'X', internalType: 'uint256', type: 'uint256' },
              { name: 'Y', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'gate_setup_commitments',
            internalType: 'struct PairingsBn254.G1Point[8]',
            type: 'tuple[8]',
            components: [
              { name: 'X', internalType: 'uint256', type: 'uint256' },
              { name: 'Y', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'permutation_commitments',
            internalType: 'struct PairingsBn254.G1Point[4]',
            type: 'tuple[4]',
            components: [
              { name: 'X', internalType: 'uint256', type: 'uint256' },
              { name: 'Y', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'lookup_selector_commitment',
            internalType: 'struct PairingsBn254.G1Point',
            type: 'tuple',
            components: [
              { name: 'X', internalType: 'uint256', type: 'uint256' },
              { name: 'Y', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'lookup_tables_commitments',
            internalType: 'struct PairingsBn254.G1Point[4]',
            type: 'tuple[4]',
            components: [
              { name: 'X', internalType: 'uint256', type: 'uint256' },
              { name: 'Y', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'lookup_table_type_commitment',
            internalType: 'struct PairingsBn254.G1Point',
            type: 'tuple',
            components: [
              { name: 'X', internalType: 'uint256', type: 'uint256' },
              { name: 'Y', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'non_residues',
            internalType: 'struct PairingsBn254.Fr[3]',
            type: 'tuple[3]',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'g2_elements',
            internalType: 'struct PairingsBn254.G2Point[2]',
            type: 'tuple[2]',
            components: [
              { name: 'X', internalType: 'uint256[2]', type: 'uint256[2]' },
              { name: 'Y', internalType: 'uint256[2]', type: 'uint256[2]' },
            ],
          },
        ],
      },
      {
        name: 'proof',
        internalType: 'struct Plonk4VerifierWithAccessToDNext.Proof',
        type: 'tuple',
        components: [
          {
            name: 'input_values',
            internalType: 'uint256[]',
            type: 'uint256[]',
          },
          {
            name: 'state_polys_commitments',
            internalType: 'struct PairingsBn254.G1Point[4]',
            type: 'tuple[4]',
            components: [
              { name: 'X', internalType: 'uint256', type: 'uint256' },
              { name: 'Y', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'copy_permutation_grand_product_commitment',
            internalType: 'struct PairingsBn254.G1Point',
            type: 'tuple',
            components: [
              { name: 'X', internalType: 'uint256', type: 'uint256' },
              { name: 'Y', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'quotient_poly_parts_commitments',
            internalType: 'struct PairingsBn254.G1Point[4]',
            type: 'tuple[4]',
            components: [
              { name: 'X', internalType: 'uint256', type: 'uint256' },
              { name: 'Y', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'state_polys_openings_at_z',
            internalType: 'struct PairingsBn254.Fr[4]',
            type: 'tuple[4]',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'state_polys_openings_at_z_omega',
            internalType: 'struct PairingsBn254.Fr[1]',
            type: 'tuple[1]',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'gate_selectors_openings_at_z',
            internalType: 'struct PairingsBn254.Fr[1]',
            type: 'tuple[1]',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'copy_permutation_polys_openings_at_z',
            internalType: 'struct PairingsBn254.Fr[3]',
            type: 'tuple[3]',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'copy_permutation_grand_product_opening_at_z_omega',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'quotient_poly_opening_at_z',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'linearization_poly_opening_at_z',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'lookup_s_poly_commitment',
            internalType: 'struct PairingsBn254.G1Point',
            type: 'tuple',
            components: [
              { name: 'X', internalType: 'uint256', type: 'uint256' },
              { name: 'Y', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'lookup_grand_product_commitment',
            internalType: 'struct PairingsBn254.G1Point',
            type: 'tuple',
            components: [
              { name: 'X', internalType: 'uint256', type: 'uint256' },
              { name: 'Y', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'lookup_s_poly_opening_at_z_omega',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'lookup_grand_product_opening_at_z_omega',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'lookup_t_poly_opening_at_z',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'lookup_t_poly_opening_at_z_omega',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'lookup_selector_poly_opening_at_z',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'lookup_table_type_poly_opening_at_z',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'opening_proof_at_z',
            internalType: 'struct PairingsBn254.G1Point',
            type: 'tuple',
            components: [
              { name: 'X', internalType: 'uint256', type: 'uint256' },
              { name: 'Y', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'opening_proof_at_z_omega',
            internalType: 'struct PairingsBn254.G1Point',
            type: 'tuple',
            components: [
              { name: 'X', internalType: 'uint256', type: 'uint256' },
              { name: 'Y', internalType: 'uint256', type: 'uint256' },
            ],
          },
        ],
      },
      {
        name: 'state',
        internalType:
          'struct Plonk4VerifierWithAccessToDNext.PartialVerifierState',
        type: 'tuple',
        components: [
          {
            name: 'zero',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'alpha',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'beta',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'gamma',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'alpha_values',
            internalType: 'struct PairingsBn254.Fr[9]',
            type: 'tuple[9]',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'eta',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'beta_lookup',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'gamma_lookup',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'beta_plus_one',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'beta_gamma',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'v',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'u',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'z',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'z_omega',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'z_minus_last_omega',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'l_0_at_z',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'l_n_minus_one_at_z',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 't',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'tp',
            internalType: 'struct PairingsBn254.G1Point',
            type: 'tuple',
            components: [
              { name: 'X', internalType: 'uint256', type: 'uint256' },
              { name: 'Y', internalType: 'uint256', type: 'uint256' },
            ],
          },
        ],
      },
    ],
    name: 'rescue_custom_gate_linearization_contribution',
    outputs: [
      {
        name: 'result',
        internalType: 'struct PairingsBn254.G1Point',
        type: 'tuple',
        components: [
          { name: 'X', internalType: 'uint256', type: 'uint256' },
          { name: 'Y', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// StdInvariant
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const stdInvariantABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'excludeArtifacts',
    outputs: [
      {
        name: 'excludedArtifacts_',
        internalType: 'string[]',
        type: 'string[]',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'excludeContracts',
    outputs: [
      {
        name: 'excludedContracts_',
        internalType: 'address[]',
        type: 'address[]',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'excludeSenders',
    outputs: [
      {
        name: 'excludedSenders_',
        internalType: 'address[]',
        type: 'address[]',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'targetArtifactSelectors',
    outputs: [
      {
        name: 'targetedArtifactSelectors_',
        internalType: 'struct StdInvariant.FuzzSelector[]',
        type: 'tuple[]',
        components: [
          { name: 'addr', internalType: 'address', type: 'address' },
          { name: 'selectors', internalType: 'bytes4[]', type: 'bytes4[]' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'targetArtifacts',
    outputs: [
      {
        name: 'targetedArtifacts_',
        internalType: 'string[]',
        type: 'string[]',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'targetContracts',
    outputs: [
      {
        name: 'targetedContracts_',
        internalType: 'address[]',
        type: 'address[]',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'targetSelectors',
    outputs: [
      {
        name: 'targetedSelectors_',
        internalType: 'struct StdInvariant.FuzzSelector[]',
        type: 'tuple[]',
        components: [
          { name: 'addr', internalType: 'address', type: 'address' },
          { name: 'selectors', internalType: 'bytes4[]', type: 'bytes4[]' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'targetSenders',
    outputs: [
      {
        name: 'targetedSenders_',
        internalType: 'address[]',
        type: 'address[]',
      },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// TankGame
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x021dbff4a864aa25c51f0ad2cd73266fde66199d)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0a8628a32f0AC3A208B8CEf032B38fF08bB140D7)
 * -
 */
export const tankGameABI = [
  {
    stateMutability: 'payable',
    type: 'constructor',
    inputs: [
      {
        name: 'gs',
        internalType: 'struct ITankGame.GameSettings',
        type: 'tuple',
        components: [
          { name: 'playerCount', internalType: 'uint256', type: 'uint256' },
          { name: 'boardSize', internalType: 'uint256', type: 'uint256' },
          { name: 'initAPs', internalType: 'uint256', type: 'uint256' },
          { name: 'initHearts', internalType: 'uint256', type: 'uint256' },
          { name: 'voteThreshold', internalType: 'uint256', type: 'uint256' },
          { name: 'initShootRange', internalType: 'uint256', type: 'uint256' },
          { name: 'upgradeCost', internalType: 'uint256', type: 'uint256' },
          { name: 'epochSeconds', internalType: 'uint256', type: 'uint256' },
          {
            name: 'actionDelaySeconds',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'reciever',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'tankId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Claim',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'tankId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Drip',
  },
  { type: 'event', anonymous: false, inputs: [], name: 'GameStarted' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'fromId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'toId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'hearts',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'aps', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'Give',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'tankId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'x', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'y', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'Move',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'player',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'PlayerJoined',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'donator',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'PrizeIncrease',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'tankId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'targetId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Shoot',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'tankId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'range',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Upgrade',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'voter',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'cursed',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'epoch',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Vote',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tankId', internalType: 'uint256', type: 'uint256' },
      { name: 'claimer', internalType: 'address', type: 'address' },
    ],
    name: 'claim',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [],
    name: 'donate',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'tankId', internalType: 'uint256', type: 'uint256' }],
    name: 'drip',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'epochStart',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getAllTanks',
    outputs: [
      {
        name: '',
        internalType: 'struct TankGame.TankLocation[]',
        type: 'tuple[]',
        components: [
          {
            name: 'tank',
            internalType: 'struct TankGame.Tank',
            type: 'tuple',
            components: [
              { name: 'owner', internalType: 'address', type: 'address' },
              { name: 'hearts', internalType: 'uint256', type: 'uint256' },
              { name: 'aps', internalType: 'uint256', type: 'uint256' },
              { name: 'range', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'position',
            internalType: 'struct ITankGame.Point',
            type: 'tuple',
            components: [
              { name: 'x', internalType: 'uint256', type: 'uint256' },
              { name: 'y', internalType: 'uint256', type: 'uint256' },
            ],
          },
          { name: 'tankId', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'tankA', internalType: 'uint256', type: 'uint256' },
      { name: 'tankB', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getDistance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'tankA', internalType: 'uint256', type: 'uint256' },
      {
        name: 'p',
        internalType: 'struct ITankGame.Point',
        type: 'tuple',
        components: [
          { name: 'x', internalType: 'uint256', type: 'uint256' },
          { name: 'y', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
    name: 'getDistance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getEpoch',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'fromId', internalType: 'uint256', type: 'uint256' },
      { name: 'toId', internalType: 'uint256', type: 'uint256' },
      { name: 'hearts', internalType: 'uint256', type: 'uint256' },
      { name: 'aps', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'give',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'heartsOnBoard',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'cs',
        internalType: 'struct TankGame.StateCheat',
        type: 'tuple',
        components: [
          { name: 'playerCount', internalType: 'uint256', type: 'uint256' },
          { name: 'numTanksAlive', internalType: 'uint256', type: 'uint256' },
          { name: 'prizePool', internalType: 'uint256', type: 'uint256' },
          {
            name: 'gameState',
            internalType: 'enum TankGame.GameState',
            type: 'uint8',
          },
          { name: 'epochStart', internalType: 'uint256', type: 'uint256' },
          {
            name: 'gameSettings',
            internalType: 'struct ITankGame.GameSettings',
            type: 'tuple',
            components: [
              { name: 'playerCount', internalType: 'uint256', type: 'uint256' },
              { name: 'boardSize', internalType: 'uint256', type: 'uint256' },
              { name: 'initAPs', internalType: 'uint256', type: 'uint256' },
              { name: 'initHearts', internalType: 'uint256', type: 'uint256' },
              {
                name: 'voteThreshold',
                internalType: 'uint256',
                type: 'uint256',
              },
              {
                name: 'initShootRange',
                internalType: 'uint256',
                type: 'uint256',
              },
              { name: 'upgradeCost', internalType: 'uint256', type: 'uint256' },
              {
                name: 'epochSeconds',
                internalType: 'uint256',
                type: 'uint256',
              },
              {
                name: 'actionDelaySeconds',
                internalType: 'uint256',
                type: 'uint256',
              },
            ],
          },
          {
            name: 'tankLocations',
            internalType: 'struct TankGame.TankLocation[]',
            type: 'tuple[]',
            components: [
              {
                name: 'tank',
                internalType: 'struct TankGame.Tank',
                type: 'tuple',
                components: [
                  { name: 'owner', internalType: 'address', type: 'address' },
                  { name: 'hearts', internalType: 'uint256', type: 'uint256' },
                  { name: 'aps', internalType: 'uint256', type: 'uint256' },
                  { name: 'range', internalType: 'uint256', type: 'uint256' },
                ],
              },
              {
                name: 'position',
                internalType: 'struct ITankGame.Point',
                type: 'tuple',
                components: [
                  { name: 'x', internalType: 'uint256', type: 'uint256' },
                  { name: 'y', internalType: 'uint256', type: 'uint256' },
                ],
              },
              { name: 'tankId', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'lastDripEpoch',
            internalType: 'uint256[]',
            type: 'uint256[]',
          },
        ],
      },
    ],
    name: 'init',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [],
    name: 'join',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'lastActionTimestamp',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'lastDripEpoch',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tankId', internalType: 'uint256', type: 'uint256' },
      {
        name: 'to',
        internalType: 'struct ITankGame.Point',
        type: 'tuple',
        components: [
          { name: 'x', internalType: 'uint256', type: 'uint256' },
          { name: 'y', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
    name: 'move',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'numTanksAlive',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'players',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'playersCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'podium',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      {
        name: 'p',
        internalType: 'struct ITankGame.Point',
        type: 'tuple',
        components: [
          { name: 'x', internalType: 'uint256', type: 'uint256' },
          { name: 'y', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
    name: 'pointToIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'prizePool',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'settings',
    outputs: [
      {
        name: '',
        internalType: 'struct ITankGame.GameSettings',
        type: 'tuple',
        components: [
          { name: 'playerCount', internalType: 'uint256', type: 'uint256' },
          { name: 'boardSize', internalType: 'uint256', type: 'uint256' },
          { name: 'initAPs', internalType: 'uint256', type: 'uint256' },
          { name: 'initHearts', internalType: 'uint256', type: 'uint256' },
          { name: 'voteThreshold', internalType: 'uint256', type: 'uint256' },
          { name: 'initShootRange', internalType: 'uint256', type: 'uint256' },
          { name: 'upgradeCost', internalType: 'uint256', type: 'uint256' },
          { name: 'epochSeconds', internalType: 'uint256', type: 'uint256' },
          {
            name: 'actionDelaySeconds',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'fromId', internalType: 'uint256', type: 'uint256' },
      { name: 'toId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'shoot',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'state',
    outputs: [
      { name: '', internalType: 'enum TankGame.GameState', type: 'uint8' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'tankToPosition',
    outputs: [
      { name: 'x', internalType: 'uint256', type: 'uint256' },
      { name: 'y', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'tanks',
    outputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'hearts', internalType: 'uint256', type: 'uint256' },
      { name: 'aps', internalType: 'uint256', type: 'uint256' },
      { name: 'range', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'tanksOnBoard',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'tankId', internalType: 'uint256', type: 'uint256' }],
    name: 'upgrade',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'voter', internalType: 'uint256', type: 'uint256' },
      { name: 'cursed', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'vote',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'votedThisEpoch',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'votesPerEpoch',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
] as const

/**
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x021dbff4a864aa25c51f0ad2cd73266fde66199d)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0a8628a32f0AC3A208B8CEf032B38fF08bB140D7)
 * -
 */
export const tankGameAddress = {
  1: '0x021DBfF4A864Aa25c51F0ad2Cd73266Fde66199d',
  5: '0x0a8628a32f0AC3A208B8CEf032B38fF08bB140D7',
  31337: '0x5FbDB2315678afecb367f032d93F642f64180aa3',
} as const

/**
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x021dbff4a864aa25c51f0ad2cd73266fde66199d)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0a8628a32f0AC3A208B8CEf032B38fF08bB140D7)
 * -
 */
export const tankGameConfig = {
  address: tankGameAddress,
  abi: tankGameABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// TankGameView
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const tankGameViewABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: 'tg', internalType: 'contract TankGame', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getAllTanks',
    outputs: [
      {
        name: '',
        internalType: 'struct TankGameView.TankLocation[]',
        type: 'tuple[]',
        components: [
          {
            name: 'tank',
            internalType: 'struct TankGame.Tank',
            type: 'tuple',
            components: [
              { name: 'owner', internalType: 'address', type: 'address' },
              { name: 'hearts', internalType: 'uint256', type: 'uint256' },
              { name: 'aps', internalType: 'uint256', type: 'uint256' },
              { name: 'range', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'position',
            internalType: 'struct ITankGame.Point',
            type: 'tuple',
            components: [
              { name: 'x', internalType: 'uint256', type: 'uint256' },
              { name: 'y', internalType: 'uint256', type: 'uint256' },
            ],
          },
          { name: 'tankId', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Verifier
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const verifierABI = [
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      {
        name: 'state',
        internalType:
          'struct Plonk4VerifierWithAccessToDNext.PartialVerifierState',
        type: 'tuple',
        components: [
          {
            name: 'zero',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'alpha',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'beta',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'gamma',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'alpha_values',
            internalType: 'struct PairingsBn254.Fr[9]',
            type: 'tuple[9]',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'eta',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'beta_lookup',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'gamma_lookup',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'beta_plus_one',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'beta_gamma',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'v',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'u',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'z',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'z_omega',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'z_minus_last_omega',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'l_0_at_z',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'l_n_minus_one_at_z',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 't',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'tp',
            internalType: 'struct PairingsBn254.G1Point',
            type: 'tuple',
            components: [
              { name: 'X', internalType: 'uint256', type: 'uint256' },
              { name: 'Y', internalType: 'uint256', type: 'uint256' },
            ],
          },
        ],
      },
    ],
    name: 'compute_powers_of_alpha',
    outputs: [],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'get_verification_key',
    outputs: [
      {
        name: 'vk',
        internalType: 'struct VerificationKey',
        type: 'tuple',
        components: [
          { name: 'domain_size', internalType: 'uint256', type: 'uint256' },
          { name: 'num_inputs', internalType: 'uint256', type: 'uint256' },
          {
            name: 'omega',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'gate_selectors_commitments',
            internalType: 'struct PairingsBn254.G1Point[2]',
            type: 'tuple[2]',
            components: [
              { name: 'X', internalType: 'uint256', type: 'uint256' },
              { name: 'Y', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'gate_setup_commitments',
            internalType: 'struct PairingsBn254.G1Point[8]',
            type: 'tuple[8]',
            components: [
              { name: 'X', internalType: 'uint256', type: 'uint256' },
              { name: 'Y', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'permutation_commitments',
            internalType: 'struct PairingsBn254.G1Point[4]',
            type: 'tuple[4]',
            components: [
              { name: 'X', internalType: 'uint256', type: 'uint256' },
              { name: 'Y', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'lookup_selector_commitment',
            internalType: 'struct PairingsBn254.G1Point',
            type: 'tuple',
            components: [
              { name: 'X', internalType: 'uint256', type: 'uint256' },
              { name: 'Y', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'lookup_tables_commitments',
            internalType: 'struct PairingsBn254.G1Point[4]',
            type: 'tuple[4]',
            components: [
              { name: 'X', internalType: 'uint256', type: 'uint256' },
              { name: 'Y', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'lookup_table_type_commitment',
            internalType: 'struct PairingsBn254.G1Point',
            type: 'tuple',
            components: [
              { name: 'X', internalType: 'uint256', type: 'uint256' },
              { name: 'Y', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'non_residues',
            internalType: 'struct PairingsBn254.Fr[3]',
            type: 'tuple[3]',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'g2_elements',
            internalType: 'struct PairingsBn254.G2Point[2]',
            type: 'tuple[2]',
            components: [
              { name: 'X', internalType: 'uint256[2]', type: 'uint256[2]' },
              { name: 'Y', internalType: 'uint256[2]', type: 'uint256[2]' },
            ],
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      {
        name: 'vk',
        internalType: 'struct VerificationKey',
        type: 'tuple',
        components: [
          { name: 'domain_size', internalType: 'uint256', type: 'uint256' },
          { name: 'num_inputs', internalType: 'uint256', type: 'uint256' },
          {
            name: 'omega',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'gate_selectors_commitments',
            internalType: 'struct PairingsBn254.G1Point[2]',
            type: 'tuple[2]',
            components: [
              { name: 'X', internalType: 'uint256', type: 'uint256' },
              { name: 'Y', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'gate_setup_commitments',
            internalType: 'struct PairingsBn254.G1Point[8]',
            type: 'tuple[8]',
            components: [
              { name: 'X', internalType: 'uint256', type: 'uint256' },
              { name: 'Y', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'permutation_commitments',
            internalType: 'struct PairingsBn254.G1Point[4]',
            type: 'tuple[4]',
            components: [
              { name: 'X', internalType: 'uint256', type: 'uint256' },
              { name: 'Y', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'lookup_selector_commitment',
            internalType: 'struct PairingsBn254.G1Point',
            type: 'tuple',
            components: [
              { name: 'X', internalType: 'uint256', type: 'uint256' },
              { name: 'Y', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'lookup_tables_commitments',
            internalType: 'struct PairingsBn254.G1Point[4]',
            type: 'tuple[4]',
            components: [
              { name: 'X', internalType: 'uint256', type: 'uint256' },
              { name: 'Y', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'lookup_table_type_commitment',
            internalType: 'struct PairingsBn254.G1Point',
            type: 'tuple',
            components: [
              { name: 'X', internalType: 'uint256', type: 'uint256' },
              { name: 'Y', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'non_residues',
            internalType: 'struct PairingsBn254.Fr[3]',
            type: 'tuple[3]',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'g2_elements',
            internalType: 'struct PairingsBn254.G2Point[2]',
            type: 'tuple[2]',
            components: [
              { name: 'X', internalType: 'uint256[2]', type: 'uint256[2]' },
              { name: 'Y', internalType: 'uint256[2]', type: 'uint256[2]' },
            ],
          },
        ],
      },
      {
        name: 'proof',
        internalType: 'struct Plonk4VerifierWithAccessToDNext.Proof',
        type: 'tuple',
        components: [
          {
            name: 'input_values',
            internalType: 'uint256[]',
            type: 'uint256[]',
          },
          {
            name: 'state_polys_commitments',
            internalType: 'struct PairingsBn254.G1Point[4]',
            type: 'tuple[4]',
            components: [
              { name: 'X', internalType: 'uint256', type: 'uint256' },
              { name: 'Y', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'copy_permutation_grand_product_commitment',
            internalType: 'struct PairingsBn254.G1Point',
            type: 'tuple',
            components: [
              { name: 'X', internalType: 'uint256', type: 'uint256' },
              { name: 'Y', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'quotient_poly_parts_commitments',
            internalType: 'struct PairingsBn254.G1Point[4]',
            type: 'tuple[4]',
            components: [
              { name: 'X', internalType: 'uint256', type: 'uint256' },
              { name: 'Y', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'state_polys_openings_at_z',
            internalType: 'struct PairingsBn254.Fr[4]',
            type: 'tuple[4]',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'state_polys_openings_at_z_omega',
            internalType: 'struct PairingsBn254.Fr[1]',
            type: 'tuple[1]',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'gate_selectors_openings_at_z',
            internalType: 'struct PairingsBn254.Fr[1]',
            type: 'tuple[1]',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'copy_permutation_polys_openings_at_z',
            internalType: 'struct PairingsBn254.Fr[3]',
            type: 'tuple[3]',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'copy_permutation_grand_product_opening_at_z_omega',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'quotient_poly_opening_at_z',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'linearization_poly_opening_at_z',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'lookup_s_poly_commitment',
            internalType: 'struct PairingsBn254.G1Point',
            type: 'tuple',
            components: [
              { name: 'X', internalType: 'uint256', type: 'uint256' },
              { name: 'Y', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'lookup_grand_product_commitment',
            internalType: 'struct PairingsBn254.G1Point',
            type: 'tuple',
            components: [
              { name: 'X', internalType: 'uint256', type: 'uint256' },
              { name: 'Y', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'lookup_s_poly_opening_at_z_omega',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'lookup_grand_product_opening_at_z_omega',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'lookup_t_poly_opening_at_z',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'lookup_t_poly_opening_at_z_omega',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'lookup_selector_poly_opening_at_z',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'lookup_table_type_poly_opening_at_z',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'opening_proof_at_z',
            internalType: 'struct PairingsBn254.G1Point',
            type: 'tuple',
            components: [
              { name: 'X', internalType: 'uint256', type: 'uint256' },
              { name: 'Y', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'opening_proof_at_z_omega',
            internalType: 'struct PairingsBn254.G1Point',
            type: 'tuple',
            components: [
              { name: 'X', internalType: 'uint256', type: 'uint256' },
              { name: 'Y', internalType: 'uint256', type: 'uint256' },
            ],
          },
        ],
      },
      {
        name: 'state',
        internalType:
          'struct Plonk4VerifierWithAccessToDNext.PartialVerifierState',
        type: 'tuple',
        components: [
          {
            name: 'zero',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'alpha',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'beta',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'gamma',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'alpha_values',
            internalType: 'struct PairingsBn254.Fr[9]',
            type: 'tuple[9]',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'eta',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'beta_lookup',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'gamma_lookup',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'beta_plus_one',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'beta_gamma',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'v',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'u',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'z',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'z_omega',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'z_minus_last_omega',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'l_0_at_z',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'l_n_minus_one_at_z',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 't',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'tp',
            internalType: 'struct PairingsBn254.G1Point',
            type: 'tuple',
            components: [
              { name: 'X', internalType: 'uint256', type: 'uint256' },
              { name: 'Y', internalType: 'uint256', type: 'uint256' },
            ],
          },
        ],
      },
    ],
    name: 'prepare_queries',
    outputs: [
      {
        name: 'queries',
        internalType: 'struct Plonk4VerifierWithAccessToDNext.Queries',
        type: 'tuple',
        components: [
          {
            name: 'commitments_at_z',
            internalType: 'struct PairingsBn254.G1Point[13]',
            type: 'tuple[13]',
            components: [
              { name: 'X', internalType: 'uint256', type: 'uint256' },
              { name: 'Y', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'values_at_z',
            internalType: 'struct PairingsBn254.Fr[13]',
            type: 'tuple[13]',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'commitments_at_z_omega',
            internalType: 'struct PairingsBn254.G1Point[6]',
            type: 'tuple[6]',
            components: [
              { name: 'X', internalType: 'uint256', type: 'uint256' },
              { name: 'Y', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'values_at_z_omega',
            internalType: 'struct PairingsBn254.Fr[6]',
            type: 'tuple[6]',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      {
        name: 'vk',
        internalType: 'struct VerificationKey',
        type: 'tuple',
        components: [
          { name: 'domain_size', internalType: 'uint256', type: 'uint256' },
          { name: 'num_inputs', internalType: 'uint256', type: 'uint256' },
          {
            name: 'omega',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'gate_selectors_commitments',
            internalType: 'struct PairingsBn254.G1Point[2]',
            type: 'tuple[2]',
            components: [
              { name: 'X', internalType: 'uint256', type: 'uint256' },
              { name: 'Y', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'gate_setup_commitments',
            internalType: 'struct PairingsBn254.G1Point[8]',
            type: 'tuple[8]',
            components: [
              { name: 'X', internalType: 'uint256', type: 'uint256' },
              { name: 'Y', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'permutation_commitments',
            internalType: 'struct PairingsBn254.G1Point[4]',
            type: 'tuple[4]',
            components: [
              { name: 'X', internalType: 'uint256', type: 'uint256' },
              { name: 'Y', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'lookup_selector_commitment',
            internalType: 'struct PairingsBn254.G1Point',
            type: 'tuple',
            components: [
              { name: 'X', internalType: 'uint256', type: 'uint256' },
              { name: 'Y', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'lookup_tables_commitments',
            internalType: 'struct PairingsBn254.G1Point[4]',
            type: 'tuple[4]',
            components: [
              { name: 'X', internalType: 'uint256', type: 'uint256' },
              { name: 'Y', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'lookup_table_type_commitment',
            internalType: 'struct PairingsBn254.G1Point',
            type: 'tuple',
            components: [
              { name: 'X', internalType: 'uint256', type: 'uint256' },
              { name: 'Y', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'non_residues',
            internalType: 'struct PairingsBn254.Fr[3]',
            type: 'tuple[3]',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'g2_elements',
            internalType: 'struct PairingsBn254.G2Point[2]',
            type: 'tuple[2]',
            components: [
              { name: 'X', internalType: 'uint256[2]', type: 'uint256[2]' },
              { name: 'Y', internalType: 'uint256[2]', type: 'uint256[2]' },
            ],
          },
        ],
      },
      {
        name: 'proof',
        internalType: 'struct Plonk4VerifierWithAccessToDNext.Proof',
        type: 'tuple',
        components: [
          {
            name: 'input_values',
            internalType: 'uint256[]',
            type: 'uint256[]',
          },
          {
            name: 'state_polys_commitments',
            internalType: 'struct PairingsBn254.G1Point[4]',
            type: 'tuple[4]',
            components: [
              { name: 'X', internalType: 'uint256', type: 'uint256' },
              { name: 'Y', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'copy_permutation_grand_product_commitment',
            internalType: 'struct PairingsBn254.G1Point',
            type: 'tuple',
            components: [
              { name: 'X', internalType: 'uint256', type: 'uint256' },
              { name: 'Y', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'quotient_poly_parts_commitments',
            internalType: 'struct PairingsBn254.G1Point[4]',
            type: 'tuple[4]',
            components: [
              { name: 'X', internalType: 'uint256', type: 'uint256' },
              { name: 'Y', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'state_polys_openings_at_z',
            internalType: 'struct PairingsBn254.Fr[4]',
            type: 'tuple[4]',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'state_polys_openings_at_z_omega',
            internalType: 'struct PairingsBn254.Fr[1]',
            type: 'tuple[1]',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'gate_selectors_openings_at_z',
            internalType: 'struct PairingsBn254.Fr[1]',
            type: 'tuple[1]',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'copy_permutation_polys_openings_at_z',
            internalType: 'struct PairingsBn254.Fr[3]',
            type: 'tuple[3]',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'copy_permutation_grand_product_opening_at_z_omega',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'quotient_poly_opening_at_z',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'linearization_poly_opening_at_z',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'lookup_s_poly_commitment',
            internalType: 'struct PairingsBn254.G1Point',
            type: 'tuple',
            components: [
              { name: 'X', internalType: 'uint256', type: 'uint256' },
              { name: 'Y', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'lookup_grand_product_commitment',
            internalType: 'struct PairingsBn254.G1Point',
            type: 'tuple',
            components: [
              { name: 'X', internalType: 'uint256', type: 'uint256' },
              { name: 'Y', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'lookup_s_poly_opening_at_z_omega',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'lookup_grand_product_opening_at_z_omega',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'lookup_t_poly_opening_at_z',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'lookup_t_poly_opening_at_z_omega',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'lookup_selector_poly_opening_at_z',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'lookup_table_type_poly_opening_at_z',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'opening_proof_at_z',
            internalType: 'struct PairingsBn254.G1Point',
            type: 'tuple',
            components: [
              { name: 'X', internalType: 'uint256', type: 'uint256' },
              { name: 'Y', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'opening_proof_at_z_omega',
            internalType: 'struct PairingsBn254.G1Point',
            type: 'tuple',
            components: [
              { name: 'X', internalType: 'uint256', type: 'uint256' },
              { name: 'Y', internalType: 'uint256', type: 'uint256' },
            ],
          },
        ],
      },
      {
        name: 'state',
        internalType:
          'struct Plonk4VerifierWithAccessToDNext.PartialVerifierState',
        type: 'tuple',
        components: [
          {
            name: 'zero',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'alpha',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'beta',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'gamma',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'alpha_values',
            internalType: 'struct PairingsBn254.Fr[9]',
            type: 'tuple[9]',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'eta',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'beta_lookup',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'gamma_lookup',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'beta_plus_one',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'beta_gamma',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'v',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'u',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'z',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'z_omega',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'z_minus_last_omega',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'l_0_at_z',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'l_n_minus_one_at_z',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 't',
            internalType: 'struct PairingsBn254.Fr',
            type: 'tuple',
            components: [
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'tp',
            internalType: 'struct PairingsBn254.G1Point',
            type: 'tuple',
            components: [
              { name: 'X', internalType: 'uint256', type: 'uint256' },
              { name: 'Y', internalType: 'uint256', type: 'uint256' },
            ],
          },
        ],
      },
    ],
    name: 'rescue_custom_gate_linearization_contribution',
    outputs: [
      {
        name: 'result',
        internalType: 'struct PairingsBn254.G1Point',
        type: 'tuple',
        components: [
          { name: 'X', internalType: 'uint256', type: 'uint256' },
          { name: 'Y', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'public_inputs', internalType: 'uint256[]', type: 'uint256[]' },
      {
        name: 'serialized_proof',
        internalType: 'uint256[]',
        type: 'uint256[]',
      },
    ],
    name: 'verify_serialized_proof',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link deployerABI}__.
 */
export function useDeployerWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof deployerABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof deployerABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof deployerABI, TFunctionName, TMode>({
    abi: deployerABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link deployerABI}__ and `functionName` set to `"deployFromL1"`.
 */
export function useDeployerDeployFromL1<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof deployerABI,
          'deployFromL1'
        >['request']['abi'],
        'deployFromL1',
        TMode
      > & { functionName?: 'deployFromL1' }
    : UseContractWriteConfig<typeof deployerABI, 'deployFromL1', TMode> & {
        abi?: never
        functionName?: 'deployFromL1'
      } = {} as any,
) {
  return useContractWrite<typeof deployerABI, 'deployFromL1', TMode>({
    abi: deployerABI,
    functionName: 'deployFromL1',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link deployerABI}__.
 */
export function usePrepareDeployerWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof deployerABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: deployerABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof deployerABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link deployerABI}__ and `functionName` set to `"deployFromL1"`.
 */
export function usePrepareDeployerDeployFromL1(
  config: Omit<
    UsePrepareContractWriteConfig<typeof deployerABI, 'deployFromL1'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: deployerABI,
    functionName: 'deployFromL1',
    ...config,
  } as UsePrepareContractWriteConfig<typeof deployerABI, 'deployFromL1'>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iContractDeployerABI}__.
 */
export function useIContractDeployerWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iContractDeployerABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof iContractDeployerABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof iContractDeployerABI, TFunctionName, TMode>({
    abi: iContractDeployerABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iContractDeployerABI}__ and `functionName` set to `"create2"`.
 */
export function useIContractDeployerCreate2<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iContractDeployerABI,
          'create2'
        >['request']['abi'],
        'create2',
        TMode
      > & { functionName?: 'create2' }
    : UseContractWriteConfig<typeof iContractDeployerABI, 'create2', TMode> & {
        abi?: never
        functionName?: 'create2'
      } = {} as any,
) {
  return useContractWrite<typeof iContractDeployerABI, 'create2', TMode>({
    abi: iContractDeployerABI,
    functionName: 'create2',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iContractDeployerABI}__.
 */
export function usePrepareIContractDeployerWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iContractDeployerABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iContractDeployerABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iContractDeployerABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iContractDeployerABI}__ and `functionName` set to `"create2"`.
 */
export function usePrepareIContractDeployerCreate2(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iContractDeployerABI, 'create2'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iContractDeployerABI,
    functionName: 'create2',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iContractDeployerABI, 'create2'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAllowListABI}__.
 */
export function useIAllowListRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iAllowListABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iAllowListABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iAllowListABI,
    ...config,
  } as UseContractReadConfig<typeof iAllowListABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAllowListABI}__ and `functionName` set to `"canCall"`.
 */
export function useIAllowListCanCall<
  TFunctionName extends 'canCall',
  TSelectData = ReadContractResult<typeof iAllowListABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iAllowListABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iAllowListABI,
    functionName: 'canCall',
    ...config,
  } as UseContractReadConfig<typeof iAllowListABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAllowListABI}__ and `functionName` set to `"getAccessMode"`.
 */
export function useIAllowListGetAccessMode<
  TFunctionName extends 'getAccessMode',
  TSelectData = ReadContractResult<typeof iAllowListABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iAllowListABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iAllowListABI,
    functionName: 'getAccessMode',
    ...config,
  } as UseContractReadConfig<typeof iAllowListABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAllowListABI}__ and `functionName` set to `"getTokenDepositLimitData"`.
 */
export function useIAllowListGetTokenDepositLimitData<
  TFunctionName extends 'getTokenDepositLimitData',
  TSelectData = ReadContractResult<typeof iAllowListABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iAllowListABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iAllowListABI,
    functionName: 'getTokenDepositLimitData',
    ...config,
  } as UseContractReadConfig<typeof iAllowListABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAllowListABI}__ and `functionName` set to `"hasSpecialAccessToCall"`.
 */
export function useIAllowListHasSpecialAccessToCall<
  TFunctionName extends 'hasSpecialAccessToCall',
  TSelectData = ReadContractResult<typeof iAllowListABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iAllowListABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iAllowListABI,
    functionName: 'hasSpecialAccessToCall',
    ...config,
  } as UseContractReadConfig<typeof iAllowListABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAllowListABI}__.
 */
export function useIAllowListWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iAllowListABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof iAllowListABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof iAllowListABI, TFunctionName, TMode>({
    abi: iAllowListABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAllowListABI}__ and `functionName` set to `"setAccessMode"`.
 */
export function useIAllowListSetAccessMode<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iAllowListABI,
          'setAccessMode'
        >['request']['abi'],
        'setAccessMode',
        TMode
      > & { functionName?: 'setAccessMode' }
    : UseContractWriteConfig<typeof iAllowListABI, 'setAccessMode', TMode> & {
        abi?: never
        functionName?: 'setAccessMode'
      } = {} as any,
) {
  return useContractWrite<typeof iAllowListABI, 'setAccessMode', TMode>({
    abi: iAllowListABI,
    functionName: 'setAccessMode',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAllowListABI}__ and `functionName` set to `"setBatchAccessMode"`.
 */
export function useIAllowListSetBatchAccessMode<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iAllowListABI,
          'setBatchAccessMode'
        >['request']['abi'],
        'setBatchAccessMode',
        TMode
      > & { functionName?: 'setBatchAccessMode' }
    : UseContractWriteConfig<
        typeof iAllowListABI,
        'setBatchAccessMode',
        TMode
      > & {
        abi?: never
        functionName?: 'setBatchAccessMode'
      } = {} as any,
) {
  return useContractWrite<typeof iAllowListABI, 'setBatchAccessMode', TMode>({
    abi: iAllowListABI,
    functionName: 'setBatchAccessMode',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAllowListABI}__ and `functionName` set to `"setBatchPermissionToCall"`.
 */
export function useIAllowListSetBatchPermissionToCall<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iAllowListABI,
          'setBatchPermissionToCall'
        >['request']['abi'],
        'setBatchPermissionToCall',
        TMode
      > & { functionName?: 'setBatchPermissionToCall' }
    : UseContractWriteConfig<
        typeof iAllowListABI,
        'setBatchPermissionToCall',
        TMode
      > & {
        abi?: never
        functionName?: 'setBatchPermissionToCall'
      } = {} as any,
) {
  return useContractWrite<
    typeof iAllowListABI,
    'setBatchPermissionToCall',
    TMode
  >({
    abi: iAllowListABI,
    functionName: 'setBatchPermissionToCall',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAllowListABI}__ and `functionName` set to `"setDepositLimit"`.
 */
export function useIAllowListSetDepositLimit<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iAllowListABI,
          'setDepositLimit'
        >['request']['abi'],
        'setDepositLimit',
        TMode
      > & { functionName?: 'setDepositLimit' }
    : UseContractWriteConfig<typeof iAllowListABI, 'setDepositLimit', TMode> & {
        abi?: never
        functionName?: 'setDepositLimit'
      } = {} as any,
) {
  return useContractWrite<typeof iAllowListABI, 'setDepositLimit', TMode>({
    abi: iAllowListABI,
    functionName: 'setDepositLimit',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAllowListABI}__ and `functionName` set to `"setPermissionToCall"`.
 */
export function useIAllowListSetPermissionToCall<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iAllowListABI,
          'setPermissionToCall'
        >['request']['abi'],
        'setPermissionToCall',
        TMode
      > & { functionName?: 'setPermissionToCall' }
    : UseContractWriteConfig<
        typeof iAllowListABI,
        'setPermissionToCall',
        TMode
      > & {
        abi?: never
        functionName?: 'setPermissionToCall'
      } = {} as any,
) {
  return useContractWrite<typeof iAllowListABI, 'setPermissionToCall', TMode>({
    abi: iAllowListABI,
    functionName: 'setPermissionToCall',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAllowListABI}__.
 */
export function usePrepareIAllowListWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iAllowListABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAllowListABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iAllowListABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAllowListABI}__ and `functionName` set to `"setAccessMode"`.
 */
export function usePrepareIAllowListSetAccessMode(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iAllowListABI, 'setAccessMode'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAllowListABI,
    functionName: 'setAccessMode',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iAllowListABI, 'setAccessMode'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAllowListABI}__ and `functionName` set to `"setBatchAccessMode"`.
 */
export function usePrepareIAllowListSetBatchAccessMode(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iAllowListABI, 'setBatchAccessMode'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAllowListABI,
    functionName: 'setBatchAccessMode',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iAllowListABI,
    'setBatchAccessMode'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAllowListABI}__ and `functionName` set to `"setBatchPermissionToCall"`.
 */
export function usePrepareIAllowListSetBatchPermissionToCall(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iAllowListABI,
      'setBatchPermissionToCall'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAllowListABI,
    functionName: 'setBatchPermissionToCall',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iAllowListABI,
    'setBatchPermissionToCall'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAllowListABI}__ and `functionName` set to `"setDepositLimit"`.
 */
export function usePrepareIAllowListSetDepositLimit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iAllowListABI, 'setDepositLimit'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAllowListABI,
    functionName: 'setDepositLimit',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iAllowListABI, 'setDepositLimit'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAllowListABI}__ and `functionName` set to `"setPermissionToCall"`.
 */
export function usePrepareIAllowListSetPermissionToCall(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iAllowListABI, 'setPermissionToCall'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAllowListABI,
    functionName: 'setPermissionToCall',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iAllowListABI,
    'setPermissionToCall'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAllowListABI}__.
 */
export function useIAllowListEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof iAllowListABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: iAllowListABI,
    ...config,
  } as UseContractEventConfig<typeof iAllowListABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAllowListABI}__ and `eventName` set to `"UpdateAccessMode"`.
 */
export function useIAllowListUpdateAccessModeEvent(
  config: Omit<
    UseContractEventConfig<typeof iAllowListABI, 'UpdateAccessMode'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iAllowListABI,
    eventName: 'UpdateAccessMode',
    ...config,
  } as UseContractEventConfig<typeof iAllowListABI, 'UpdateAccessMode'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAllowListABI}__ and `eventName` set to `"UpdateCallPermission"`.
 */
export function useIAllowListUpdateCallPermissionEvent(
  config: Omit<
    UseContractEventConfig<typeof iAllowListABI, 'UpdateCallPermission'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iAllowListABI,
    eventName: 'UpdateCallPermission',
    ...config,
  } as UseContractEventConfig<typeof iAllowListABI, 'UpdateCallPermission'>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iDeployerABI}__.
 */
export function useIDeployerWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iDeployerABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof iDeployerABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof iDeployerABI, TFunctionName, TMode>({
    abi: iDeployerABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iDeployerABI}__ and `functionName` set to `"deployFromL1"`.
 */
export function useIDeployerDeployFromL1<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iDeployerABI,
          'deployFromL1'
        >['request']['abi'],
        'deployFromL1',
        TMode
      > & { functionName?: 'deployFromL1' }
    : UseContractWriteConfig<typeof iDeployerABI, 'deployFromL1', TMode> & {
        abi?: never
        functionName?: 'deployFromL1'
      } = {} as any,
) {
  return useContractWrite<typeof iDeployerABI, 'deployFromL1', TMode>({
    abi: iDeployerABI,
    functionName: 'deployFromL1',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iDeployerABI}__.
 */
export function usePrepareIDeployerWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iDeployerABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iDeployerABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iDeployerABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iDeployerABI}__ and `functionName` set to `"deployFromL1"`.
 */
export function usePrepareIDeployerDeployFromL1(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iDeployerABI, 'deployFromL1'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iDeployerABI,
    functionName: 'deployFromL1',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iDeployerABI, 'deployFromL1'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMailboxABI}__.
 */
export function useIMailboxRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iMailboxABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMailboxABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iMailboxABI,
    ...config,
  } as UseContractReadConfig<typeof iMailboxABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMailboxABI}__ and `functionName` set to `"l2TransactionBaseCost"`.
 */
export function useIMailboxL2TransactionBaseCost<
  TFunctionName extends 'l2TransactionBaseCost',
  TSelectData = ReadContractResult<typeof iMailboxABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMailboxABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMailboxABI,
    functionName: 'l2TransactionBaseCost',
    ...config,
  } as UseContractReadConfig<typeof iMailboxABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMailboxABI}__ and `functionName` set to `"proveL1ToL2TransactionStatus"`.
 */
export function useIMailboxProveL1ToL2TransactionStatus<
  TFunctionName extends 'proveL1ToL2TransactionStatus',
  TSelectData = ReadContractResult<typeof iMailboxABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMailboxABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMailboxABI,
    functionName: 'proveL1ToL2TransactionStatus',
    ...config,
  } as UseContractReadConfig<typeof iMailboxABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMailboxABI}__ and `functionName` set to `"proveL2LogInclusion"`.
 */
export function useIMailboxProveL2LogInclusion<
  TFunctionName extends 'proveL2LogInclusion',
  TSelectData = ReadContractResult<typeof iMailboxABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMailboxABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMailboxABI,
    functionName: 'proveL2LogInclusion',
    ...config,
  } as UseContractReadConfig<typeof iMailboxABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMailboxABI}__ and `functionName` set to `"proveL2MessageInclusion"`.
 */
export function useIMailboxProveL2MessageInclusion<
  TFunctionName extends 'proveL2MessageInclusion',
  TSelectData = ReadContractResult<typeof iMailboxABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMailboxABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMailboxABI,
    functionName: 'proveL2MessageInclusion',
    ...config,
  } as UseContractReadConfig<typeof iMailboxABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMailboxABI}__.
 */
export function useIMailboxWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iMailboxABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof iMailboxABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof iMailboxABI, TFunctionName, TMode>({
    abi: iMailboxABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMailboxABI}__ and `functionName` set to `"finalizeEthWithdrawal"`.
 */
export function useIMailboxFinalizeEthWithdrawal<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iMailboxABI,
          'finalizeEthWithdrawal'
        >['request']['abi'],
        'finalizeEthWithdrawal',
        TMode
      > & { functionName?: 'finalizeEthWithdrawal' }
    : UseContractWriteConfig<
        typeof iMailboxABI,
        'finalizeEthWithdrawal',
        TMode
      > & {
        abi?: never
        functionName?: 'finalizeEthWithdrawal'
      } = {} as any,
) {
  return useContractWrite<typeof iMailboxABI, 'finalizeEthWithdrawal', TMode>({
    abi: iMailboxABI,
    functionName: 'finalizeEthWithdrawal',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMailboxABI}__ and `functionName` set to `"requestL2Transaction"`.
 */
export function useIMailboxRequestL2Transaction<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iMailboxABI,
          'requestL2Transaction'
        >['request']['abi'],
        'requestL2Transaction',
        TMode
      > & { functionName?: 'requestL2Transaction' }
    : UseContractWriteConfig<
        typeof iMailboxABI,
        'requestL2Transaction',
        TMode
      > & {
        abi?: never
        functionName?: 'requestL2Transaction'
      } = {} as any,
) {
  return useContractWrite<typeof iMailboxABI, 'requestL2Transaction', TMode>({
    abi: iMailboxABI,
    functionName: 'requestL2Transaction',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMailboxABI}__.
 */
export function usePrepareIMailboxWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iMailboxABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMailboxABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iMailboxABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMailboxABI}__ and `functionName` set to `"finalizeEthWithdrawal"`.
 */
export function usePrepareIMailboxFinalizeEthWithdrawal(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iMailboxABI, 'finalizeEthWithdrawal'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMailboxABI,
    functionName: 'finalizeEthWithdrawal',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iMailboxABI,
    'finalizeEthWithdrawal'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMailboxABI}__ and `functionName` set to `"requestL2Transaction"`.
 */
export function usePrepareIMailboxRequestL2Transaction(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iMailboxABI, 'requestL2Transaction'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMailboxABI,
    functionName: 'requestL2Transaction',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iMailboxABI,
    'requestL2Transaction'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iMailboxABI}__.
 */
export function useIMailboxEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof iMailboxABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: iMailboxABI,
    ...config,
  } as UseContractEventConfig<typeof iMailboxABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iMailboxABI}__ and `eventName` set to `"EthWithdrawalFinalized"`.
 */
export function useIMailboxEthWithdrawalFinalizedEvent(
  config: Omit<
    UseContractEventConfig<typeof iMailboxABI, 'EthWithdrawalFinalized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iMailboxABI,
    eventName: 'EthWithdrawalFinalized',
    ...config,
  } as UseContractEventConfig<typeof iMailboxABI, 'EthWithdrawalFinalized'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iMailboxABI}__ and `eventName` set to `"NewPriorityRequest"`.
 */
export function useIMailboxNewPriorityRequestEvent(
  config: Omit<
    UseContractEventConfig<typeof iMailboxABI, 'NewPriorityRequest'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iMailboxABI,
    eventName: 'NewPriorityRequest',
    ...config,
  } as UseContractEventConfig<typeof iMailboxABI, 'NewPriorityRequest'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__.
 */
export function useIMulticall3Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iMulticall3ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iMulticall3ABI,
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getBasefee"`.
 */
export function useIMulticall3GetBasefee<
  TFunctionName extends 'getBasefee',
  TSelectData = ReadContractResult<typeof iMulticall3ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: 'getBasefee',
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getBlockHash"`.
 */
export function useIMulticall3GetBlockHash<
  TFunctionName extends 'getBlockHash',
  TSelectData = ReadContractResult<typeof iMulticall3ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: 'getBlockHash',
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getBlockNumber"`.
 */
export function useIMulticall3GetBlockNumber<
  TFunctionName extends 'getBlockNumber',
  TSelectData = ReadContractResult<typeof iMulticall3ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: 'getBlockNumber',
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getChainId"`.
 */
export function useIMulticall3GetChainId<
  TFunctionName extends 'getChainId',
  TSelectData = ReadContractResult<typeof iMulticall3ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: 'getChainId',
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getCurrentBlockCoinbase"`.
 */
export function useIMulticall3GetCurrentBlockCoinbase<
  TFunctionName extends 'getCurrentBlockCoinbase',
  TSelectData = ReadContractResult<typeof iMulticall3ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: 'getCurrentBlockCoinbase',
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getCurrentBlockDifficulty"`.
 */
export function useIMulticall3GetCurrentBlockDifficulty<
  TFunctionName extends 'getCurrentBlockDifficulty',
  TSelectData = ReadContractResult<typeof iMulticall3ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: 'getCurrentBlockDifficulty',
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getCurrentBlockGasLimit"`.
 */
export function useIMulticall3GetCurrentBlockGasLimit<
  TFunctionName extends 'getCurrentBlockGasLimit',
  TSelectData = ReadContractResult<typeof iMulticall3ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: 'getCurrentBlockGasLimit',
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getCurrentBlockTimestamp"`.
 */
export function useIMulticall3GetCurrentBlockTimestamp<
  TFunctionName extends 'getCurrentBlockTimestamp',
  TSelectData = ReadContractResult<typeof iMulticall3ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: 'getCurrentBlockTimestamp',
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getEthBalance"`.
 */
export function useIMulticall3GetEthBalance<
  TFunctionName extends 'getEthBalance',
  TSelectData = ReadContractResult<typeof iMulticall3ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: 'getEthBalance',
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getLastBlockHash"`.
 */
export function useIMulticall3GetLastBlockHash<
  TFunctionName extends 'getLastBlockHash',
  TSelectData = ReadContractResult<typeof iMulticall3ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: 'getLastBlockHash',
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__.
 */
export function useIMulticall3Write<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iMulticall3ABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof iMulticall3ABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof iMulticall3ABI, TFunctionName, TMode>({
    abi: iMulticall3ABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"aggregate"`.
 */
export function useIMulticall3Aggregate<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iMulticall3ABI,
          'aggregate'
        >['request']['abi'],
        'aggregate',
        TMode
      > & { functionName?: 'aggregate' }
    : UseContractWriteConfig<typeof iMulticall3ABI, 'aggregate', TMode> & {
        abi?: never
        functionName?: 'aggregate'
      } = {} as any,
) {
  return useContractWrite<typeof iMulticall3ABI, 'aggregate', TMode>({
    abi: iMulticall3ABI,
    functionName: 'aggregate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"aggregate3"`.
 */
export function useIMulticall3Aggregate3<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iMulticall3ABI,
          'aggregate3'
        >['request']['abi'],
        'aggregate3',
        TMode
      > & { functionName?: 'aggregate3' }
    : UseContractWriteConfig<typeof iMulticall3ABI, 'aggregate3', TMode> & {
        abi?: never
        functionName?: 'aggregate3'
      } = {} as any,
) {
  return useContractWrite<typeof iMulticall3ABI, 'aggregate3', TMode>({
    abi: iMulticall3ABI,
    functionName: 'aggregate3',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"aggregate3Value"`.
 */
export function useIMulticall3Aggregate3Value<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iMulticall3ABI,
          'aggregate3Value'
        >['request']['abi'],
        'aggregate3Value',
        TMode
      > & { functionName?: 'aggregate3Value' }
    : UseContractWriteConfig<
        typeof iMulticall3ABI,
        'aggregate3Value',
        TMode
      > & {
        abi?: never
        functionName?: 'aggregate3Value'
      } = {} as any,
) {
  return useContractWrite<typeof iMulticall3ABI, 'aggregate3Value', TMode>({
    abi: iMulticall3ABI,
    functionName: 'aggregate3Value',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"blockAndAggregate"`.
 */
export function useIMulticall3BlockAndAggregate<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iMulticall3ABI,
          'blockAndAggregate'
        >['request']['abi'],
        'blockAndAggregate',
        TMode
      > & { functionName?: 'blockAndAggregate' }
    : UseContractWriteConfig<
        typeof iMulticall3ABI,
        'blockAndAggregate',
        TMode
      > & {
        abi?: never
        functionName?: 'blockAndAggregate'
      } = {} as any,
) {
  return useContractWrite<typeof iMulticall3ABI, 'blockAndAggregate', TMode>({
    abi: iMulticall3ABI,
    functionName: 'blockAndAggregate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"tryAggregate"`.
 */
export function useIMulticall3TryAggregate<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iMulticall3ABI,
          'tryAggregate'
        >['request']['abi'],
        'tryAggregate',
        TMode
      > & { functionName?: 'tryAggregate' }
    : UseContractWriteConfig<typeof iMulticall3ABI, 'tryAggregate', TMode> & {
        abi?: never
        functionName?: 'tryAggregate'
      } = {} as any,
) {
  return useContractWrite<typeof iMulticall3ABI, 'tryAggregate', TMode>({
    abi: iMulticall3ABI,
    functionName: 'tryAggregate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"tryBlockAndAggregate"`.
 */
export function useIMulticall3TryBlockAndAggregate<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iMulticall3ABI,
          'tryBlockAndAggregate'
        >['request']['abi'],
        'tryBlockAndAggregate',
        TMode
      > & { functionName?: 'tryBlockAndAggregate' }
    : UseContractWriteConfig<
        typeof iMulticall3ABI,
        'tryBlockAndAggregate',
        TMode
      > & {
        abi?: never
        functionName?: 'tryBlockAndAggregate'
      } = {} as any,
) {
  return useContractWrite<typeof iMulticall3ABI, 'tryBlockAndAggregate', TMode>(
    {
      abi: iMulticall3ABI,
      functionName: 'tryBlockAndAggregate',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__.
 */
export function usePrepareIMulticall3Write<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iMulticall3ABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMulticall3ABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iMulticall3ABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"aggregate"`.
 */
export function usePrepareIMulticall3Aggregate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'aggregate'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMulticall3ABI,
    functionName: 'aggregate',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'aggregate'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"aggregate3"`.
 */
export function usePrepareIMulticall3Aggregate3(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'aggregate3'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMulticall3ABI,
    functionName: 'aggregate3',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'aggregate3'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"aggregate3Value"`.
 */
export function usePrepareIMulticall3Aggregate3Value(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'aggregate3Value'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMulticall3ABI,
    functionName: 'aggregate3Value',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'aggregate3Value'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"blockAndAggregate"`.
 */
export function usePrepareIMulticall3BlockAndAggregate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'blockAndAggregate'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMulticall3ABI,
    functionName: 'blockAndAggregate',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iMulticall3ABI,
    'blockAndAggregate'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"tryAggregate"`.
 */
export function usePrepareIMulticall3TryAggregate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'tryAggregate'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMulticall3ABI,
    functionName: 'tryAggregate',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'tryAggregate'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"tryBlockAndAggregate"`.
 */
export function usePrepareIMulticall3TryBlockAndAggregate(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iMulticall3ABI,
      'tryBlockAndAggregate'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMulticall3ABI,
    functionName: 'tryBlockAndAggregate',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iMulticall3ABI,
    'tryBlockAndAggregate'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iTankGameABI}__.
 */
export function useITankGameRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iTankGameABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iTankGameABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iTankGameABI,
    ...config,
  } as UseContractReadConfig<typeof iTankGameABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iTankGameABI}__ and `functionName` set to `"settings"`.
 */
export function useITankGameSettings<
  TFunctionName extends 'settings',
  TSelectData = ReadContractResult<typeof iTankGameABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iTankGameABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iTankGameABI,
    functionName: 'settings',
    ...config,
  } as UseContractReadConfig<typeof iTankGameABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iTankGameABI}__.
 */
export function useITankGameWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iTankGameABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof iTankGameABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof iTankGameABI, TFunctionName, TMode>({
    abi: iTankGameABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iTankGameABI}__ and `functionName` set to `"claim"`.
 */
export function useITankGameClaim<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iTankGameABI,
          'claim'
        >['request']['abi'],
        'claim',
        TMode
      > & { functionName?: 'claim' }
    : UseContractWriteConfig<typeof iTankGameABI, 'claim', TMode> & {
        abi?: never
        functionName?: 'claim'
      } = {} as any,
) {
  return useContractWrite<typeof iTankGameABI, 'claim', TMode>({
    abi: iTankGameABI,
    functionName: 'claim',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iTankGameABI}__ and `functionName` set to `"drip"`.
 */
export function useITankGameDrip<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iTankGameABI,
          'drip'
        >['request']['abi'],
        'drip',
        TMode
      > & { functionName?: 'drip' }
    : UseContractWriteConfig<typeof iTankGameABI, 'drip', TMode> & {
        abi?: never
        functionName?: 'drip'
      } = {} as any,
) {
  return useContractWrite<typeof iTankGameABI, 'drip', TMode>({
    abi: iTankGameABI,
    functionName: 'drip',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iTankGameABI}__ and `functionName` set to `"give"`.
 */
export function useITankGameGive<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iTankGameABI,
          'give'
        >['request']['abi'],
        'give',
        TMode
      > & { functionName?: 'give' }
    : UseContractWriteConfig<typeof iTankGameABI, 'give', TMode> & {
        abi?: never
        functionName?: 'give'
      } = {} as any,
) {
  return useContractWrite<typeof iTankGameABI, 'give', TMode>({
    abi: iTankGameABI,
    functionName: 'give',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iTankGameABI}__ and `functionName` set to `"join"`.
 */
export function useITankGameJoin<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iTankGameABI,
          'join'
        >['request']['abi'],
        'join',
        TMode
      > & { functionName?: 'join' }
    : UseContractWriteConfig<typeof iTankGameABI, 'join', TMode> & {
        abi?: never
        functionName?: 'join'
      } = {} as any,
) {
  return useContractWrite<typeof iTankGameABI, 'join', TMode>({
    abi: iTankGameABI,
    functionName: 'join',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iTankGameABI}__ and `functionName` set to `"move"`.
 */
export function useITankGameMove<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iTankGameABI,
          'move'
        >['request']['abi'],
        'move',
        TMode
      > & { functionName?: 'move' }
    : UseContractWriteConfig<typeof iTankGameABI, 'move', TMode> & {
        abi?: never
        functionName?: 'move'
      } = {} as any,
) {
  return useContractWrite<typeof iTankGameABI, 'move', TMode>({
    abi: iTankGameABI,
    functionName: 'move',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iTankGameABI}__ and `functionName` set to `"shoot"`.
 */
export function useITankGameShoot<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iTankGameABI,
          'shoot'
        >['request']['abi'],
        'shoot',
        TMode
      > & { functionName?: 'shoot' }
    : UseContractWriteConfig<typeof iTankGameABI, 'shoot', TMode> & {
        abi?: never
        functionName?: 'shoot'
      } = {} as any,
) {
  return useContractWrite<typeof iTankGameABI, 'shoot', TMode>({
    abi: iTankGameABI,
    functionName: 'shoot',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iTankGameABI}__ and `functionName` set to `"upgrade"`.
 */
export function useITankGameUpgrade<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iTankGameABI,
          'upgrade'
        >['request']['abi'],
        'upgrade',
        TMode
      > & { functionName?: 'upgrade' }
    : UseContractWriteConfig<typeof iTankGameABI, 'upgrade', TMode> & {
        abi?: never
        functionName?: 'upgrade'
      } = {} as any,
) {
  return useContractWrite<typeof iTankGameABI, 'upgrade', TMode>({
    abi: iTankGameABI,
    functionName: 'upgrade',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iTankGameABI}__ and `functionName` set to `"vote"`.
 */
export function useITankGameVote<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iTankGameABI,
          'vote'
        >['request']['abi'],
        'vote',
        TMode
      > & { functionName?: 'vote' }
    : UseContractWriteConfig<typeof iTankGameABI, 'vote', TMode> & {
        abi?: never
        functionName?: 'vote'
      } = {} as any,
) {
  return useContractWrite<typeof iTankGameABI, 'vote', TMode>({
    abi: iTankGameABI,
    functionName: 'vote',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iTankGameABI}__.
 */
export function usePrepareITankGameWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iTankGameABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iTankGameABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iTankGameABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iTankGameABI}__ and `functionName` set to `"claim"`.
 */
export function usePrepareITankGameClaim(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iTankGameABI, 'claim'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iTankGameABI,
    functionName: 'claim',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iTankGameABI, 'claim'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iTankGameABI}__ and `functionName` set to `"drip"`.
 */
export function usePrepareITankGameDrip(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iTankGameABI, 'drip'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iTankGameABI,
    functionName: 'drip',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iTankGameABI, 'drip'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iTankGameABI}__ and `functionName` set to `"give"`.
 */
export function usePrepareITankGameGive(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iTankGameABI, 'give'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iTankGameABI,
    functionName: 'give',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iTankGameABI, 'give'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iTankGameABI}__ and `functionName` set to `"join"`.
 */
export function usePrepareITankGameJoin(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iTankGameABI, 'join'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iTankGameABI,
    functionName: 'join',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iTankGameABI, 'join'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iTankGameABI}__ and `functionName` set to `"move"`.
 */
export function usePrepareITankGameMove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iTankGameABI, 'move'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iTankGameABI,
    functionName: 'move',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iTankGameABI, 'move'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iTankGameABI}__ and `functionName` set to `"shoot"`.
 */
export function usePrepareITankGameShoot(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iTankGameABI, 'shoot'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iTankGameABI,
    functionName: 'shoot',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iTankGameABI, 'shoot'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iTankGameABI}__ and `functionName` set to `"upgrade"`.
 */
export function usePrepareITankGameUpgrade(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iTankGameABI, 'upgrade'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iTankGameABI,
    functionName: 'upgrade',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iTankGameABI, 'upgrade'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iTankGameABI}__ and `functionName` set to `"vote"`.
 */
export function usePrepareITankGameVote(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iTankGameABI, 'vote'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iTankGameABI,
    functionName: 'vote',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iTankGameABI, 'vote'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link plonk4VerifierWithAccessToDNextABI}__.
 */
export function usePlonk4VerifierWithAccessToDNextRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof plonk4VerifierWithAccessToDNextABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof plonk4VerifierWithAccessToDNextABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: plonk4VerifierWithAccessToDNextABI,
    ...config,
  } as UseContractReadConfig<
    typeof plonk4VerifierWithAccessToDNextABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link plonk4VerifierWithAccessToDNextABI}__ and `functionName` set to `"compute_powers_of_alpha"`.
 */
export function usePlonk4VerifierWithAccessToDNextComputePowersOfAlpha<
  TFunctionName extends 'compute_powers_of_alpha',
  TSelectData = ReadContractResult<
    typeof plonk4VerifierWithAccessToDNextABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof plonk4VerifierWithAccessToDNextABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: plonk4VerifierWithAccessToDNextABI,
    functionName: 'compute_powers_of_alpha',
    ...config,
  } as UseContractReadConfig<
    typeof plonk4VerifierWithAccessToDNextABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link plonk4VerifierWithAccessToDNextABI}__ and `functionName` set to `"prepare_queries"`.
 */
export function usePlonk4VerifierWithAccessToDNextPrepareQueries<
  TFunctionName extends 'prepare_queries',
  TSelectData = ReadContractResult<
    typeof plonk4VerifierWithAccessToDNextABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof plonk4VerifierWithAccessToDNextABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: plonk4VerifierWithAccessToDNextABI,
    functionName: 'prepare_queries',
    ...config,
  } as UseContractReadConfig<
    typeof plonk4VerifierWithAccessToDNextABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link plonk4VerifierWithAccessToDNextABI}__ and `functionName` set to `"rescue_custom_gate_linearization_contribution"`.
 */
export function usePlonk4VerifierWithAccessToDNextRescueCustomGateLinearizationContribution<
  TFunctionName extends 'rescue_custom_gate_linearization_contribution',
  TSelectData = ReadContractResult<
    typeof plonk4VerifierWithAccessToDNextABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof plonk4VerifierWithAccessToDNextABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: plonk4VerifierWithAccessToDNextABI,
    functionName: 'rescue_custom_gate_linearization_contribution',
    ...config,
  } as UseContractReadConfig<
    typeof plonk4VerifierWithAccessToDNextABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stdInvariantABI}__.
 */
export function useStdInvariantRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof stdInvariantABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stdInvariantABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: stdInvariantABI,
    ...config,
  } as UseContractReadConfig<
    typeof stdInvariantABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stdInvariantABI}__ and `functionName` set to `"excludeArtifacts"`.
 */
export function useStdInvariantExcludeArtifacts<
  TFunctionName extends 'excludeArtifacts',
  TSelectData = ReadContractResult<typeof stdInvariantABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stdInvariantABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stdInvariantABI,
    functionName: 'excludeArtifacts',
    ...config,
  } as UseContractReadConfig<
    typeof stdInvariantABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stdInvariantABI}__ and `functionName` set to `"excludeContracts"`.
 */
export function useStdInvariantExcludeContracts<
  TFunctionName extends 'excludeContracts',
  TSelectData = ReadContractResult<typeof stdInvariantABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stdInvariantABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stdInvariantABI,
    functionName: 'excludeContracts',
    ...config,
  } as UseContractReadConfig<
    typeof stdInvariantABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stdInvariantABI}__ and `functionName` set to `"excludeSenders"`.
 */
export function useStdInvariantExcludeSenders<
  TFunctionName extends 'excludeSenders',
  TSelectData = ReadContractResult<typeof stdInvariantABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stdInvariantABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stdInvariantABI,
    functionName: 'excludeSenders',
    ...config,
  } as UseContractReadConfig<
    typeof stdInvariantABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stdInvariantABI}__ and `functionName` set to `"targetArtifactSelectors"`.
 */
export function useStdInvariantTargetArtifactSelectors<
  TFunctionName extends 'targetArtifactSelectors',
  TSelectData = ReadContractResult<typeof stdInvariantABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stdInvariantABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stdInvariantABI,
    functionName: 'targetArtifactSelectors',
    ...config,
  } as UseContractReadConfig<
    typeof stdInvariantABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stdInvariantABI}__ and `functionName` set to `"targetArtifacts"`.
 */
export function useStdInvariantTargetArtifacts<
  TFunctionName extends 'targetArtifacts',
  TSelectData = ReadContractResult<typeof stdInvariantABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stdInvariantABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stdInvariantABI,
    functionName: 'targetArtifacts',
    ...config,
  } as UseContractReadConfig<
    typeof stdInvariantABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stdInvariantABI}__ and `functionName` set to `"targetContracts"`.
 */
export function useStdInvariantTargetContracts<
  TFunctionName extends 'targetContracts',
  TSelectData = ReadContractResult<typeof stdInvariantABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stdInvariantABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stdInvariantABI,
    functionName: 'targetContracts',
    ...config,
  } as UseContractReadConfig<
    typeof stdInvariantABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stdInvariantABI}__ and `functionName` set to `"targetSelectors"`.
 */
export function useStdInvariantTargetSelectors<
  TFunctionName extends 'targetSelectors',
  TSelectData = ReadContractResult<typeof stdInvariantABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stdInvariantABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stdInvariantABI,
    functionName: 'targetSelectors',
    ...config,
  } as UseContractReadConfig<
    typeof stdInvariantABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stdInvariantABI}__ and `functionName` set to `"targetSenders"`.
 */
export function useStdInvariantTargetSenders<
  TFunctionName extends 'targetSenders',
  TSelectData = ReadContractResult<typeof stdInvariantABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stdInvariantABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stdInvariantABI,
    functionName: 'targetSenders',
    ...config,
  } as UseContractReadConfig<
    typeof stdInvariantABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tankGameABI}__.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x021dbff4a864aa25c51f0ad2cd73266fde66199d)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0a8628a32f0AC3A208B8CEf032B38fF08bB140D7)
 * -
 */
export function useTankGameRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof tankGameABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tankGameABI, TFunctionName, TSelectData>,
    'abi' | 'address'
  > & { chainId?: keyof typeof tankGameAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: tankGameABI,
    address: tankGameAddress[chainId as keyof typeof tankGameAddress],
    ...config,
  } as UseContractReadConfig<typeof tankGameABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tankGameABI}__ and `functionName` set to `"epochStart"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x021dbff4a864aa25c51f0ad2cd73266fde66199d)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0a8628a32f0AC3A208B8CEf032B38fF08bB140D7)
 * -
 */
export function useTankGameEpochStart<
  TFunctionName extends 'epochStart',
  TSelectData = ReadContractResult<typeof tankGameABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tankGameABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof tankGameAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: tankGameABI,
    address: tankGameAddress[chainId as keyof typeof tankGameAddress],
    functionName: 'epochStart',
    ...config,
  } as UseContractReadConfig<typeof tankGameABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tankGameABI}__ and `functionName` set to `"getAllTanks"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x021dbff4a864aa25c51f0ad2cd73266fde66199d)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0a8628a32f0AC3A208B8CEf032B38fF08bB140D7)
 * -
 */
export function useTankGameGetAllTanks<
  TFunctionName extends 'getAllTanks',
  TSelectData = ReadContractResult<typeof tankGameABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tankGameABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof tankGameAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: tankGameABI,
    address: tankGameAddress[chainId as keyof typeof tankGameAddress],
    functionName: 'getAllTanks',
    ...config,
  } as UseContractReadConfig<typeof tankGameABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tankGameABI}__ and `functionName` set to `"getDistance"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x021dbff4a864aa25c51f0ad2cd73266fde66199d)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0a8628a32f0AC3A208B8CEf032B38fF08bB140D7)
 * -
 */
export function useTankGameGetDistance<
  TFunctionName extends 'getDistance',
  TSelectData = ReadContractResult<typeof tankGameABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tankGameABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof tankGameAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: tankGameABI,
    address: tankGameAddress[chainId as keyof typeof tankGameAddress],
    functionName: 'getDistance',
    ...config,
  } as UseContractReadConfig<typeof tankGameABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tankGameABI}__ and `functionName` set to `"getEpoch"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x021dbff4a864aa25c51f0ad2cd73266fde66199d)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0a8628a32f0AC3A208B8CEf032B38fF08bB140D7)
 * -
 */
export function useTankGameGetEpoch<
  TFunctionName extends 'getEpoch',
  TSelectData = ReadContractResult<typeof tankGameABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tankGameABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof tankGameAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: tankGameABI,
    address: tankGameAddress[chainId as keyof typeof tankGameAddress],
    functionName: 'getEpoch',
    ...config,
  } as UseContractReadConfig<typeof tankGameABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tankGameABI}__ and `functionName` set to `"heartsOnBoard"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x021dbff4a864aa25c51f0ad2cd73266fde66199d)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0a8628a32f0AC3A208B8CEf032B38fF08bB140D7)
 * -
 */
export function useTankGameHeartsOnBoard<
  TFunctionName extends 'heartsOnBoard',
  TSelectData = ReadContractResult<typeof tankGameABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tankGameABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof tankGameAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: tankGameABI,
    address: tankGameAddress[chainId as keyof typeof tankGameAddress],
    functionName: 'heartsOnBoard',
    ...config,
  } as UseContractReadConfig<typeof tankGameABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tankGameABI}__ and `functionName` set to `"lastActionTimestamp"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x021dbff4a864aa25c51f0ad2cd73266fde66199d)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0a8628a32f0AC3A208B8CEf032B38fF08bB140D7)
 * -
 */
export function useTankGameLastActionTimestamp<
  TFunctionName extends 'lastActionTimestamp',
  TSelectData = ReadContractResult<typeof tankGameABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tankGameABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof tankGameAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: tankGameABI,
    address: tankGameAddress[chainId as keyof typeof tankGameAddress],
    functionName: 'lastActionTimestamp',
    ...config,
  } as UseContractReadConfig<typeof tankGameABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tankGameABI}__ and `functionName` set to `"lastDripEpoch"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x021dbff4a864aa25c51f0ad2cd73266fde66199d)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0a8628a32f0AC3A208B8CEf032B38fF08bB140D7)
 * -
 */
export function useTankGameLastDripEpoch<
  TFunctionName extends 'lastDripEpoch',
  TSelectData = ReadContractResult<typeof tankGameABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tankGameABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof tankGameAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: tankGameABI,
    address: tankGameAddress[chainId as keyof typeof tankGameAddress],
    functionName: 'lastDripEpoch',
    ...config,
  } as UseContractReadConfig<typeof tankGameABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tankGameABI}__ and `functionName` set to `"numTanksAlive"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x021dbff4a864aa25c51f0ad2cd73266fde66199d)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0a8628a32f0AC3A208B8CEf032B38fF08bB140D7)
 * -
 */
export function useTankGameNumTanksAlive<
  TFunctionName extends 'numTanksAlive',
  TSelectData = ReadContractResult<typeof tankGameABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tankGameABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof tankGameAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: tankGameABI,
    address: tankGameAddress[chainId as keyof typeof tankGameAddress],
    functionName: 'numTanksAlive',
    ...config,
  } as UseContractReadConfig<typeof tankGameABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tankGameABI}__ and `functionName` set to `"players"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x021dbff4a864aa25c51f0ad2cd73266fde66199d)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0a8628a32f0AC3A208B8CEf032B38fF08bB140D7)
 * -
 */
export function useTankGamePlayers<
  TFunctionName extends 'players',
  TSelectData = ReadContractResult<typeof tankGameABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tankGameABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof tankGameAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: tankGameABI,
    address: tankGameAddress[chainId as keyof typeof tankGameAddress],
    functionName: 'players',
    ...config,
  } as UseContractReadConfig<typeof tankGameABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tankGameABI}__ and `functionName` set to `"playersCount"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x021dbff4a864aa25c51f0ad2cd73266fde66199d)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0a8628a32f0AC3A208B8CEf032B38fF08bB140D7)
 * -
 */
export function useTankGamePlayersCount<
  TFunctionName extends 'playersCount',
  TSelectData = ReadContractResult<typeof tankGameABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tankGameABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof tankGameAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: tankGameABI,
    address: tankGameAddress[chainId as keyof typeof tankGameAddress],
    functionName: 'playersCount',
    ...config,
  } as UseContractReadConfig<typeof tankGameABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tankGameABI}__ and `functionName` set to `"podium"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x021dbff4a864aa25c51f0ad2cd73266fde66199d)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0a8628a32f0AC3A208B8CEf032B38fF08bB140D7)
 * -
 */
export function useTankGamePodium<
  TFunctionName extends 'podium',
  TSelectData = ReadContractResult<typeof tankGameABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tankGameABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof tankGameAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: tankGameABI,
    address: tankGameAddress[chainId as keyof typeof tankGameAddress],
    functionName: 'podium',
    ...config,
  } as UseContractReadConfig<typeof tankGameABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tankGameABI}__ and `functionName` set to `"pointToIndex"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x021dbff4a864aa25c51f0ad2cd73266fde66199d)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0a8628a32f0AC3A208B8CEf032B38fF08bB140D7)
 * -
 */
export function useTankGamePointToIndex<
  TFunctionName extends 'pointToIndex',
  TSelectData = ReadContractResult<typeof tankGameABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tankGameABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof tankGameAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: tankGameABI,
    address: tankGameAddress[chainId as keyof typeof tankGameAddress],
    functionName: 'pointToIndex',
    ...config,
  } as UseContractReadConfig<typeof tankGameABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tankGameABI}__ and `functionName` set to `"prizePool"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x021dbff4a864aa25c51f0ad2cd73266fde66199d)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0a8628a32f0AC3A208B8CEf032B38fF08bB140D7)
 * -
 */
export function useTankGamePrizePool<
  TFunctionName extends 'prizePool',
  TSelectData = ReadContractResult<typeof tankGameABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tankGameABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof tankGameAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: tankGameABI,
    address: tankGameAddress[chainId as keyof typeof tankGameAddress],
    functionName: 'prizePool',
    ...config,
  } as UseContractReadConfig<typeof tankGameABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tankGameABI}__ and `functionName` set to `"settings"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x021dbff4a864aa25c51f0ad2cd73266fde66199d)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0a8628a32f0AC3A208B8CEf032B38fF08bB140D7)
 * -
 */
export function useTankGameSettings<
  TFunctionName extends 'settings',
  TSelectData = ReadContractResult<typeof tankGameABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tankGameABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof tankGameAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: tankGameABI,
    address: tankGameAddress[chainId as keyof typeof tankGameAddress],
    functionName: 'settings',
    ...config,
  } as UseContractReadConfig<typeof tankGameABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tankGameABI}__ and `functionName` set to `"state"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x021dbff4a864aa25c51f0ad2cd73266fde66199d)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0a8628a32f0AC3A208B8CEf032B38fF08bB140D7)
 * -
 */
export function useTankGameState<
  TFunctionName extends 'state',
  TSelectData = ReadContractResult<typeof tankGameABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tankGameABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof tankGameAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: tankGameABI,
    address: tankGameAddress[chainId as keyof typeof tankGameAddress],
    functionName: 'state',
    ...config,
  } as UseContractReadConfig<typeof tankGameABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tankGameABI}__ and `functionName` set to `"tankToPosition"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x021dbff4a864aa25c51f0ad2cd73266fde66199d)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0a8628a32f0AC3A208B8CEf032B38fF08bB140D7)
 * -
 */
export function useTankGameTankToPosition<
  TFunctionName extends 'tankToPosition',
  TSelectData = ReadContractResult<typeof tankGameABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tankGameABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof tankGameAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: tankGameABI,
    address: tankGameAddress[chainId as keyof typeof tankGameAddress],
    functionName: 'tankToPosition',
    ...config,
  } as UseContractReadConfig<typeof tankGameABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tankGameABI}__ and `functionName` set to `"tanks"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x021dbff4a864aa25c51f0ad2cd73266fde66199d)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0a8628a32f0AC3A208B8CEf032B38fF08bB140D7)
 * -
 */
export function useTankGameTanks<
  TFunctionName extends 'tanks',
  TSelectData = ReadContractResult<typeof tankGameABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tankGameABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof tankGameAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: tankGameABI,
    address: tankGameAddress[chainId as keyof typeof tankGameAddress],
    functionName: 'tanks',
    ...config,
  } as UseContractReadConfig<typeof tankGameABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tankGameABI}__ and `functionName` set to `"tanksOnBoard"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x021dbff4a864aa25c51f0ad2cd73266fde66199d)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0a8628a32f0AC3A208B8CEf032B38fF08bB140D7)
 * -
 */
export function useTankGameTanksOnBoard<
  TFunctionName extends 'tanksOnBoard',
  TSelectData = ReadContractResult<typeof tankGameABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tankGameABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof tankGameAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: tankGameABI,
    address: tankGameAddress[chainId as keyof typeof tankGameAddress],
    functionName: 'tanksOnBoard',
    ...config,
  } as UseContractReadConfig<typeof tankGameABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tankGameABI}__ and `functionName` set to `"votedThisEpoch"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x021dbff4a864aa25c51f0ad2cd73266fde66199d)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0a8628a32f0AC3A208B8CEf032B38fF08bB140D7)
 * -
 */
export function useTankGameVotedThisEpoch<
  TFunctionName extends 'votedThisEpoch',
  TSelectData = ReadContractResult<typeof tankGameABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tankGameABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof tankGameAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: tankGameABI,
    address: tankGameAddress[chainId as keyof typeof tankGameAddress],
    functionName: 'votedThisEpoch',
    ...config,
  } as UseContractReadConfig<typeof tankGameABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tankGameABI}__ and `functionName` set to `"votesPerEpoch"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x021dbff4a864aa25c51f0ad2cd73266fde66199d)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0a8628a32f0AC3A208B8CEf032B38fF08bB140D7)
 * -
 */
export function useTankGameVotesPerEpoch<
  TFunctionName extends 'votesPerEpoch',
  TSelectData = ReadContractResult<typeof tankGameABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tankGameABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof tankGameAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: tankGameABI,
    address: tankGameAddress[chainId as keyof typeof tankGameAddress],
    functionName: 'votesPerEpoch',
    ...config,
  } as UseContractReadConfig<typeof tankGameABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tankGameABI}__.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x021dbff4a864aa25c51f0ad2cd73266fde66199d)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0a8628a32f0AC3A208B8CEf032B38fF08bB140D7)
 * -
 */
export function useTankGameWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof tankGameAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof tankGameABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      > & { address?: Address; chainId?: TChainId }
    : UseContractWriteConfig<typeof tankGameABI, TFunctionName, TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof tankGameABI, TFunctionName, TMode>({
    abi: tankGameABI,
    address: tankGameAddress[chainId as keyof typeof tankGameAddress],
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tankGameABI}__ and `functionName` set to `"claim"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x021dbff4a864aa25c51f0ad2cd73266fde66199d)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0a8628a32f0AC3A208B8CEf032B38fF08bB140D7)
 * -
 */
export function useTankGameClaim<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof tankGameAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof tankGameABI,
          'claim'
        >['request']['abi'],
        'claim',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'claim' }
    : UseContractWriteConfig<typeof tankGameABI, 'claim', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'claim'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof tankGameABI, 'claim', TMode>({
    abi: tankGameABI,
    address: tankGameAddress[chainId as keyof typeof tankGameAddress],
    functionName: 'claim',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tankGameABI}__ and `functionName` set to `"donate"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x021dbff4a864aa25c51f0ad2cd73266fde66199d)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0a8628a32f0AC3A208B8CEf032B38fF08bB140D7)
 * -
 */
export function useTankGameDonate<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof tankGameAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof tankGameABI,
          'donate'
        >['request']['abi'],
        'donate',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'donate' }
    : UseContractWriteConfig<typeof tankGameABI, 'donate', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'donate'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof tankGameABI, 'donate', TMode>({
    abi: tankGameABI,
    address: tankGameAddress[chainId as keyof typeof tankGameAddress],
    functionName: 'donate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tankGameABI}__ and `functionName` set to `"drip"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x021dbff4a864aa25c51f0ad2cd73266fde66199d)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0a8628a32f0AC3A208B8CEf032B38fF08bB140D7)
 * -
 */
export function useTankGameDrip<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof tankGameAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof tankGameABI,
          'drip'
        >['request']['abi'],
        'drip',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'drip' }
    : UseContractWriteConfig<typeof tankGameABI, 'drip', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'drip'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof tankGameABI, 'drip', TMode>({
    abi: tankGameABI,
    address: tankGameAddress[chainId as keyof typeof tankGameAddress],
    functionName: 'drip',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tankGameABI}__ and `functionName` set to `"give"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x021dbff4a864aa25c51f0ad2cd73266fde66199d)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0a8628a32f0AC3A208B8CEf032B38fF08bB140D7)
 * -
 */
export function useTankGameGive<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof tankGameAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof tankGameABI,
          'give'
        >['request']['abi'],
        'give',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'give' }
    : UseContractWriteConfig<typeof tankGameABI, 'give', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'give'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof tankGameABI, 'give', TMode>({
    abi: tankGameABI,
    address: tankGameAddress[chainId as keyof typeof tankGameAddress],
    functionName: 'give',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tankGameABI}__ and `functionName` set to `"init"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x021dbff4a864aa25c51f0ad2cd73266fde66199d)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0a8628a32f0AC3A208B8CEf032B38fF08bB140D7)
 * -
 */
export function useTankGameInit<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof tankGameAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof tankGameABI,
          'init'
        >['request']['abi'],
        'init',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'init' }
    : UseContractWriteConfig<typeof tankGameABI, 'init', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'init'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof tankGameABI, 'init', TMode>({
    abi: tankGameABI,
    address: tankGameAddress[chainId as keyof typeof tankGameAddress],
    functionName: 'init',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tankGameABI}__ and `functionName` set to `"join"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x021dbff4a864aa25c51f0ad2cd73266fde66199d)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0a8628a32f0AC3A208B8CEf032B38fF08bB140D7)
 * -
 */
export function useTankGameJoin<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof tankGameAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof tankGameABI,
          'join'
        >['request']['abi'],
        'join',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'join' }
    : UseContractWriteConfig<typeof tankGameABI, 'join', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'join'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof tankGameABI, 'join', TMode>({
    abi: tankGameABI,
    address: tankGameAddress[chainId as keyof typeof tankGameAddress],
    functionName: 'join',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tankGameABI}__ and `functionName` set to `"move"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x021dbff4a864aa25c51f0ad2cd73266fde66199d)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0a8628a32f0AC3A208B8CEf032B38fF08bB140D7)
 * -
 */
export function useTankGameMove<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof tankGameAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof tankGameABI,
          'move'
        >['request']['abi'],
        'move',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'move' }
    : UseContractWriteConfig<typeof tankGameABI, 'move', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'move'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof tankGameABI, 'move', TMode>({
    abi: tankGameABI,
    address: tankGameAddress[chainId as keyof typeof tankGameAddress],
    functionName: 'move',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tankGameABI}__ and `functionName` set to `"shoot"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x021dbff4a864aa25c51f0ad2cd73266fde66199d)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0a8628a32f0AC3A208B8CEf032B38fF08bB140D7)
 * -
 */
export function useTankGameShoot<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof tankGameAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof tankGameABI,
          'shoot'
        >['request']['abi'],
        'shoot',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'shoot' }
    : UseContractWriteConfig<typeof tankGameABI, 'shoot', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'shoot'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof tankGameABI, 'shoot', TMode>({
    abi: tankGameABI,
    address: tankGameAddress[chainId as keyof typeof tankGameAddress],
    functionName: 'shoot',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tankGameABI}__ and `functionName` set to `"upgrade"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x021dbff4a864aa25c51f0ad2cd73266fde66199d)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0a8628a32f0AC3A208B8CEf032B38fF08bB140D7)
 * -
 */
export function useTankGameUpgrade<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof tankGameAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof tankGameABI,
          'upgrade'
        >['request']['abi'],
        'upgrade',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'upgrade' }
    : UseContractWriteConfig<typeof tankGameABI, 'upgrade', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'upgrade'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof tankGameABI, 'upgrade', TMode>({
    abi: tankGameABI,
    address: tankGameAddress[chainId as keyof typeof tankGameAddress],
    functionName: 'upgrade',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tankGameABI}__ and `functionName` set to `"vote"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x021dbff4a864aa25c51f0ad2cd73266fde66199d)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0a8628a32f0AC3A208B8CEf032B38fF08bB140D7)
 * -
 */
export function useTankGameVote<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof tankGameAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof tankGameABI,
          'vote'
        >['request']['abi'],
        'vote',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'vote' }
    : UseContractWriteConfig<typeof tankGameABI, 'vote', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'vote'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof tankGameABI, 'vote', TMode>({
    abi: tankGameABI,
    address: tankGameAddress[chainId as keyof typeof tankGameAddress],
    functionName: 'vote',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tankGameABI}__.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x021dbff4a864aa25c51f0ad2cd73266fde66199d)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0a8628a32f0AC3A208B8CEf032B38fF08bB140D7)
 * -
 */
export function usePrepareTankGameWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tankGameABI, TFunctionName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof tankGameAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: tankGameABI,
    address: tankGameAddress[chainId as keyof typeof tankGameAddress],
    ...config,
  } as UsePrepareContractWriteConfig<typeof tankGameABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tankGameABI}__ and `functionName` set to `"claim"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x021dbff4a864aa25c51f0ad2cd73266fde66199d)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0a8628a32f0AC3A208B8CEf032B38fF08bB140D7)
 * -
 */
export function usePrepareTankGameClaim(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tankGameABI, 'claim'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof tankGameAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: tankGameABI,
    address: tankGameAddress[chainId as keyof typeof tankGameAddress],
    functionName: 'claim',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tankGameABI, 'claim'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tankGameABI}__ and `functionName` set to `"donate"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x021dbff4a864aa25c51f0ad2cd73266fde66199d)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0a8628a32f0AC3A208B8CEf032B38fF08bB140D7)
 * -
 */
export function usePrepareTankGameDonate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tankGameABI, 'donate'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof tankGameAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: tankGameABI,
    address: tankGameAddress[chainId as keyof typeof tankGameAddress],
    functionName: 'donate',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tankGameABI, 'donate'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tankGameABI}__ and `functionName` set to `"drip"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x021dbff4a864aa25c51f0ad2cd73266fde66199d)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0a8628a32f0AC3A208B8CEf032B38fF08bB140D7)
 * -
 */
export function usePrepareTankGameDrip(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tankGameABI, 'drip'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof tankGameAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: tankGameABI,
    address: tankGameAddress[chainId as keyof typeof tankGameAddress],
    functionName: 'drip',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tankGameABI, 'drip'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tankGameABI}__ and `functionName` set to `"give"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x021dbff4a864aa25c51f0ad2cd73266fde66199d)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0a8628a32f0AC3A208B8CEf032B38fF08bB140D7)
 * -
 */
export function usePrepareTankGameGive(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tankGameABI, 'give'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof tankGameAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: tankGameABI,
    address: tankGameAddress[chainId as keyof typeof tankGameAddress],
    functionName: 'give',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tankGameABI, 'give'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tankGameABI}__ and `functionName` set to `"init"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x021dbff4a864aa25c51f0ad2cd73266fde66199d)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0a8628a32f0AC3A208B8CEf032B38fF08bB140D7)
 * -
 */
export function usePrepareTankGameInit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tankGameABI, 'init'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof tankGameAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: tankGameABI,
    address: tankGameAddress[chainId as keyof typeof tankGameAddress],
    functionName: 'init',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tankGameABI, 'init'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tankGameABI}__ and `functionName` set to `"join"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x021dbff4a864aa25c51f0ad2cd73266fde66199d)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0a8628a32f0AC3A208B8CEf032B38fF08bB140D7)
 * -
 */
export function usePrepareTankGameJoin(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tankGameABI, 'join'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof tankGameAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: tankGameABI,
    address: tankGameAddress[chainId as keyof typeof tankGameAddress],
    functionName: 'join',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tankGameABI, 'join'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tankGameABI}__ and `functionName` set to `"move"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x021dbff4a864aa25c51f0ad2cd73266fde66199d)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0a8628a32f0AC3A208B8CEf032B38fF08bB140D7)
 * -
 */
export function usePrepareTankGameMove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tankGameABI, 'move'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof tankGameAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: tankGameABI,
    address: tankGameAddress[chainId as keyof typeof tankGameAddress],
    functionName: 'move',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tankGameABI, 'move'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tankGameABI}__ and `functionName` set to `"shoot"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x021dbff4a864aa25c51f0ad2cd73266fde66199d)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0a8628a32f0AC3A208B8CEf032B38fF08bB140D7)
 * -
 */
export function usePrepareTankGameShoot(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tankGameABI, 'shoot'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof tankGameAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: tankGameABI,
    address: tankGameAddress[chainId as keyof typeof tankGameAddress],
    functionName: 'shoot',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tankGameABI, 'shoot'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tankGameABI}__ and `functionName` set to `"upgrade"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x021dbff4a864aa25c51f0ad2cd73266fde66199d)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0a8628a32f0AC3A208B8CEf032B38fF08bB140D7)
 * -
 */
export function usePrepareTankGameUpgrade(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tankGameABI, 'upgrade'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof tankGameAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: tankGameABI,
    address: tankGameAddress[chainId as keyof typeof tankGameAddress],
    functionName: 'upgrade',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tankGameABI, 'upgrade'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tankGameABI}__ and `functionName` set to `"vote"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x021dbff4a864aa25c51f0ad2cd73266fde66199d)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0a8628a32f0AC3A208B8CEf032B38fF08bB140D7)
 * -
 */
export function usePrepareTankGameVote(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tankGameABI, 'vote'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof tankGameAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: tankGameABI,
    address: tankGameAddress[chainId as keyof typeof tankGameAddress],
    functionName: 'vote',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tankGameABI, 'vote'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tankGameABI}__.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x021dbff4a864aa25c51f0ad2cd73266fde66199d)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0a8628a32f0AC3A208B8CEf032B38fF08bB140D7)
 * -
 */
export function useTankGameEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof tankGameABI, TEventName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof tankGameAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: tankGameABI,
    address: tankGameAddress[chainId as keyof typeof tankGameAddress],
    ...config,
  } as UseContractEventConfig<typeof tankGameABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tankGameABI}__ and `eventName` set to `"Claim"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x021dbff4a864aa25c51f0ad2cd73266fde66199d)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0a8628a32f0AC3A208B8CEf032B38fF08bB140D7)
 * -
 */
export function useTankGameClaimEvent(
  config: Omit<
    UseContractEventConfig<typeof tankGameABI, 'Claim'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof tankGameAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: tankGameABI,
    address: tankGameAddress[chainId as keyof typeof tankGameAddress],
    eventName: 'Claim',
    ...config,
  } as UseContractEventConfig<typeof tankGameABI, 'Claim'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tankGameABI}__ and `eventName` set to `"Drip"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x021dbff4a864aa25c51f0ad2cd73266fde66199d)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0a8628a32f0AC3A208B8CEf032B38fF08bB140D7)
 * -
 */
export function useTankGameDripEvent(
  config: Omit<
    UseContractEventConfig<typeof tankGameABI, 'Drip'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof tankGameAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: tankGameABI,
    address: tankGameAddress[chainId as keyof typeof tankGameAddress],
    eventName: 'Drip',
    ...config,
  } as UseContractEventConfig<typeof tankGameABI, 'Drip'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tankGameABI}__ and `eventName` set to `"GameStarted"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x021dbff4a864aa25c51f0ad2cd73266fde66199d)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0a8628a32f0AC3A208B8CEf032B38fF08bB140D7)
 * -
 */
export function useTankGameGameStartedEvent(
  config: Omit<
    UseContractEventConfig<typeof tankGameABI, 'GameStarted'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof tankGameAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: tankGameABI,
    address: tankGameAddress[chainId as keyof typeof tankGameAddress],
    eventName: 'GameStarted',
    ...config,
  } as UseContractEventConfig<typeof tankGameABI, 'GameStarted'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tankGameABI}__ and `eventName` set to `"Give"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x021dbff4a864aa25c51f0ad2cd73266fde66199d)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0a8628a32f0AC3A208B8CEf032B38fF08bB140D7)
 * -
 */
export function useTankGameGiveEvent(
  config: Omit<
    UseContractEventConfig<typeof tankGameABI, 'Give'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof tankGameAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: tankGameABI,
    address: tankGameAddress[chainId as keyof typeof tankGameAddress],
    eventName: 'Give',
    ...config,
  } as UseContractEventConfig<typeof tankGameABI, 'Give'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tankGameABI}__ and `eventName` set to `"Move"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x021dbff4a864aa25c51f0ad2cd73266fde66199d)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0a8628a32f0AC3A208B8CEf032B38fF08bB140D7)
 * -
 */
export function useTankGameMoveEvent(
  config: Omit<
    UseContractEventConfig<typeof tankGameABI, 'Move'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof tankGameAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: tankGameABI,
    address: tankGameAddress[chainId as keyof typeof tankGameAddress],
    eventName: 'Move',
    ...config,
  } as UseContractEventConfig<typeof tankGameABI, 'Move'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tankGameABI}__ and `eventName` set to `"PlayerJoined"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x021dbff4a864aa25c51f0ad2cd73266fde66199d)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0a8628a32f0AC3A208B8CEf032B38fF08bB140D7)
 * -
 */
export function useTankGamePlayerJoinedEvent(
  config: Omit<
    UseContractEventConfig<typeof tankGameABI, 'PlayerJoined'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof tankGameAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: tankGameABI,
    address: tankGameAddress[chainId as keyof typeof tankGameAddress],
    eventName: 'PlayerJoined',
    ...config,
  } as UseContractEventConfig<typeof tankGameABI, 'PlayerJoined'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tankGameABI}__ and `eventName` set to `"PrizeIncrease"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x021dbff4a864aa25c51f0ad2cd73266fde66199d)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0a8628a32f0AC3A208B8CEf032B38fF08bB140D7)
 * -
 */
export function useTankGamePrizeIncreaseEvent(
  config: Omit<
    UseContractEventConfig<typeof tankGameABI, 'PrizeIncrease'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof tankGameAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: tankGameABI,
    address: tankGameAddress[chainId as keyof typeof tankGameAddress],
    eventName: 'PrizeIncrease',
    ...config,
  } as UseContractEventConfig<typeof tankGameABI, 'PrizeIncrease'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tankGameABI}__ and `eventName` set to `"Shoot"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x021dbff4a864aa25c51f0ad2cd73266fde66199d)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0a8628a32f0AC3A208B8CEf032B38fF08bB140D7)
 * -
 */
export function useTankGameShootEvent(
  config: Omit<
    UseContractEventConfig<typeof tankGameABI, 'Shoot'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof tankGameAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: tankGameABI,
    address: tankGameAddress[chainId as keyof typeof tankGameAddress],
    eventName: 'Shoot',
    ...config,
  } as UseContractEventConfig<typeof tankGameABI, 'Shoot'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tankGameABI}__ and `eventName` set to `"Upgrade"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x021dbff4a864aa25c51f0ad2cd73266fde66199d)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0a8628a32f0AC3A208B8CEf032B38fF08bB140D7)
 * -
 */
export function useTankGameUpgradeEvent(
  config: Omit<
    UseContractEventConfig<typeof tankGameABI, 'Upgrade'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof tankGameAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: tankGameABI,
    address: tankGameAddress[chainId as keyof typeof tankGameAddress],
    eventName: 'Upgrade',
    ...config,
  } as UseContractEventConfig<typeof tankGameABI, 'Upgrade'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tankGameABI}__ and `eventName` set to `"Vote"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x021dbff4a864aa25c51f0ad2cd73266fde66199d)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0a8628a32f0AC3A208B8CEf032B38fF08bB140D7)
 * -
 */
export function useTankGameVoteEvent(
  config: Omit<
    UseContractEventConfig<typeof tankGameABI, 'Vote'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof tankGameAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: tankGameABI,
    address: tankGameAddress[chainId as keyof typeof tankGameAddress],
    eventName: 'Vote',
    ...config,
  } as UseContractEventConfig<typeof tankGameABI, 'Vote'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tankGameViewABI}__.
 */
export function useTankGameViewRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof tankGameViewABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tankGameViewABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: tankGameViewABI,
    ...config,
  } as UseContractReadConfig<
    typeof tankGameViewABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tankGameViewABI}__ and `functionName` set to `"getAllTanks"`.
 */
export function useTankGameViewGetAllTanks<
  TFunctionName extends 'getAllTanks',
  TSelectData = ReadContractResult<typeof tankGameViewABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tankGameViewABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tankGameViewABI,
    functionName: 'getAllTanks',
    ...config,
  } as UseContractReadConfig<
    typeof tankGameViewABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link verifierABI}__.
 */
export function useVerifierRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof verifierABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof verifierABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: verifierABI,
    ...config,
  } as UseContractReadConfig<typeof verifierABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link verifierABI}__ and `functionName` set to `"compute_powers_of_alpha"`.
 */
export function useVerifierComputePowersOfAlpha<
  TFunctionName extends 'compute_powers_of_alpha',
  TSelectData = ReadContractResult<typeof verifierABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof verifierABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: verifierABI,
    functionName: 'compute_powers_of_alpha',
    ...config,
  } as UseContractReadConfig<typeof verifierABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link verifierABI}__ and `functionName` set to `"get_verification_key"`.
 */
export function useVerifierGetVerificationKey<
  TFunctionName extends 'get_verification_key',
  TSelectData = ReadContractResult<typeof verifierABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof verifierABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: verifierABI,
    functionName: 'get_verification_key',
    ...config,
  } as UseContractReadConfig<typeof verifierABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link verifierABI}__ and `functionName` set to `"prepare_queries"`.
 */
export function useVerifierPrepareQueries<
  TFunctionName extends 'prepare_queries',
  TSelectData = ReadContractResult<typeof verifierABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof verifierABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: verifierABI,
    functionName: 'prepare_queries',
    ...config,
  } as UseContractReadConfig<typeof verifierABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link verifierABI}__ and `functionName` set to `"rescue_custom_gate_linearization_contribution"`.
 */
export function useVerifierRescueCustomGateLinearizationContribution<
  TFunctionName extends 'rescue_custom_gate_linearization_contribution',
  TSelectData = ReadContractResult<typeof verifierABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof verifierABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: verifierABI,
    functionName: 'rescue_custom_gate_linearization_contribution',
    ...config,
  } as UseContractReadConfig<typeof verifierABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link verifierABI}__ and `functionName` set to `"verify_serialized_proof"`.
 */
export function useVerifierVerifySerializedProof<
  TFunctionName extends 'verify_serialized_proof',
  TSelectData = ReadContractResult<typeof verifierABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof verifierABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: verifierABI,
    functionName: 'verify_serialized_proof',
    ...config,
  } as UseContractReadConfig<typeof verifierABI, TFunctionName, TSelectData>)
}
